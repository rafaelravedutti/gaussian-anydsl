/* Apply 2D filter convolution with separable kernels (tiling) */
fn apply_separable_convolution(input_image : image, output_image : image, h_mask : filter, v_mask : filter) -> () {
  /* Horizontal anchor based in the horizontal mask size */
  let h_anchor = h_mask.width / 2;
  /* Vertical anchor based in the vertical mask size */
  let v_anchor = v_mask.height / 2;

  /* Allocate temporary data in the target device for holding the row convolution result */
  let tmp_image = create_temporary_image(input_image.width, input_image.height);

  /* Applies the filter in columns */
  for x, y, input, filt in @iterate_stencil(input_image, h_mask) {
    /* Sum is 0.0 by default */
    let mut sum = 0.0;

    /* Check image boundaries to avoid invalid memory region access */
    if x >= h_anchor && x < input_image.width - h_anchor {
      /* Go through the horizontal mask coefficients using the specified anchor */
      for i in range(-h_anchor, h_anchor + 1) {
        /* Increase the current coefficient and input product in the summation */
        sum += get_1d_filter_coeff(filt, i + h_anchor) * get_pixel(input, x + i, y);
      }

      /* Write the summation result in the temporary buffer */
      set_pixel(tmp_image, x, y, sum);
    /* If this is an invalid region, just copy the input pixel value to the temporary buffer */
    } else {
      /* Use original input value */
      set_pixel(tmp_image, x, y, get_pixel(input, x, y));
    }
  }

  /* Applies the filter in rows */
  for x, y, input, filt in @iterate_stencil(tmp_image, v_mask) {
    /* Sum is 0.0 by default */
    let mut sum = 0.0;

    /* Check image boundaries to avoid invalid memory region access */
    if y >= v_anchor && y < input_image.height - v_anchor {
      /* Go through the vertical mask coefficients using the specified anchor */
      for i in range(-v_anchor, v_anchor + 1) {
        /* Increase the current coefficient and input product in the summation */
        sum += get_1d_filter_coeff(filt, i + v_anchor) * get_pixel(input, x, y + i);
      }

      /* Write the summation result in the output buffer */
      set_pixel(output_image, x, y, sum);
    /* If this is an invalid region, just copy the temporary pixel value to the output buffer */
    } else {
      /* Use original input value */
      set_pixel(output_image, x, y, get_pixel(input, x, y));
    }
  }

  /* Release memory for temporary buffer */
  release_image(tmp_image);
}

/* Apply 2D filter convolution with non-separable kernels (blocks) */
fn apply_block_convolution(input_image : image, output_image : image, mask : filter) -> () {
  let h_anchor = mask.width / 2;
  let v_anchor = mask.height / 2;

  /* Applies the filter in blocks */
  for x, y, input, filt in @iterate_stencil(input_image, mask) {
    let mut sum = 0.0;

    /* Check image boundaries to avoid invalid memory region access */
    if x >= h_anchor && x < input_image.width - h_anchor && y >= v_anchor && y < input_image.height - v_anchor {
      /* Go through the block mask coefficients using the specified anchor */
      for i in range(-h_anchor, h_anchor + 1) {
        for j in range(-v_anchor, v_anchor + 1) {
          /* Increase the current coefficient and input product in the summation */
          sum += get_2d_filter_coeff(filt, i + h_anchor, j + v_anchor) * get_pixel(input, x + i, y + j);
        }
      }

      /* Write the summation result in the output buffer */
      set_pixel(output_image, x, y, sum);
    /* If this is an invalid region, just copy the input pixel value to the output buffer */
    } else {
      /* Use original input value */
      set_pixel(output_image, x, y, get_pixel(input, x, y));
    }
  }
}

/* Gaussian filter */
fn gaussian_blur(input_image : image, output_image : image, use_tiled : bool) -> () {
  /* Generates the separable or non-separable Gaussian kernel based on the
     OpenCV source code */
  let filter_size = 7;
  let filter_Nx1 = filter_7x1;
  let filter_NxN = filter_7x7;

  /* Allocate CPU memory for the mask buffers (block, row and column) */
  let bmask_xy = alloc_cpu(filter_size * filter_size * sizeof[f64]());
  let bmask_x = alloc_cpu(filter_size * sizeof[f64]());
  let bmask_y = alloc_cpu(filter_size * sizeof[f64]());

  /* Pointers to the buffers in f64 data type */
  let mask_xy = bmask_xy.data as &mut[f64];
  let mask_x = bmask_x.data as &mut[f64];
  let mask_y = bmask_y.data as &mut[f64];

  /* The next steps generate the gaussian filter for both block as well as horizontal
     and vertical kernels */
  let mut sum_x = 0.0;
  let mut sum_y = 0.0;
  let anchor = 2.0;
  let pi = 3.14159;
  let sigma = 1.1;
  let prod = 1.0 / (2.0 * pi * sigma * sigma);
  let denom = 2.0 * sigma * sigma;

  for i in range(0, filter_size) {
    let x = (i as f64) - anchor;

    for j in range(0, filter_size) {
      let y = (j as f64) - anchor;

      mask_xy(j * filter_size + i) = prod * exp(-((x * x + y * y) / denom));
    }

    mask_x(i) = exp(-((x * x) / denom));
    mask_y(i) = exp(-((x * x) / denom));
    sum_x += mask_x(i);
    sum_y += mask_y(i);
  }

  sum_x = 1.0 / sum_x;
  sum_y = 1.0 / sum_y;

  for i in range(0, filter_size) {
    mask_x(i) *= sum_x;
    mask_y(i) *= sum_y;
  }

  /* Applies the separable kernel in rows and columns */
  if use_tiled {
    let column_filter = filter_Nx1(bmask_x, false);
    let row_filter = filter_Nx1(bmask_y, true);

    apply_separable_convolution(input_image, output_image, column_filter, row_filter);

    release_filter(column_filter);
    release_filter(row_filter);
  /* Applies the not separable kernel in blocks */
  } else {
    let block_filter = filter_NxN(bmask_xy);
    apply_block_convolution(input_image, output_image, block_filter);
    release_filter(block_filter);
  }

  /* Release memory for the mask buffers */
  release(bmask_xy);
  release(bmask_x);
  release(bmask_y);
}
