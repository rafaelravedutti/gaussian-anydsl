/* Functions defined in C/C++ */
extern "C" {
  fn opencv_create_image(width : i32, height : i32) -> &mut[f64];
  fn opencv_load_image(path : &[u8], width : &i32, height : &i32) -> &mut[f64];
  fn opencv_write_image(img : &[f64], filename : &[u8]) -> ();
}

/* Create an image in Impala using the C/C++ API */
fn create_image(width : i32, height : i32) -> image {
  /* Image structure */
  let mut img : image;

  /* Creates a buffer in the CPU (device 0) pointing to the returned
     image data structure returned from the C/C++ function */
  img.buffer = Buffer {
    device: 0,
    data: opencv_create_image(width, height) as &[i8]
  };

  /* Set image width */
  img.width = width;
  /* Set image height */
  img.height = height;
  /* If necessary, allocate the image data in the target device */
  img.device_data = get_image_device_data(img);

  img
}

/* Load an image from a file in Impala using the C/C++ API */
fn load_image(filename : &[u8]) -> image {
  /* Image structure */
  let mut img : image;
  /* Pointer to the image struct width */
  let pwidth = &mut img.width;
  /* Pointer to the image struct height */
  let pheight = &mut img.height;

  /* Creates a buffer in the CPU (device 0) pointing to the returned
     image data structure returned from the C/C++ function */
  img.buffer = Buffer {
    device: 0,
    data: opencv_load_image(filename, pwidth, pheight) as &[i8]
  };

  /* If necessary, allocate the image data in the target device */
  img.device_data = get_image_device_data(img);

  img
}

/* Write an image to a file in Impala using the C/C++ API */
fn write_image(img : image, filename : &[u8]) -> () {
  /* Just call the C/C++ function to write the image data */
  opencv_write_image(img.buffer.data as &[f64], filename);
}
