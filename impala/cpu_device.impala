/* Image structure */
struct image {
  buffer : Buffer,      /* Buffer that contains host data */
  device_data : Buffer, /* Data in the target device */
  width : i32,          /* Image width */
  height : i32          /* Image height */
};

/* Filter structure */
struct filter {
  buffer : Buffer,      /* Buffer that contains target device data */
  width : i32,          /* Filter width */
  height : i32          /* Filter height */
};

/* Iterate from min to max executing a function */
fn range(mut min : i32, max : i32, body : fn(i32) -> ()) -> () {
  /* While maximum value not reached */
  while min < max {
    /* Call the given function */
    body(min);
    /* Go to next iteration */
    min++;
  }
}

/* Exponential function */
fn exp(a : f64) -> f64 {
  /* Call CPU intrinsic exponential function provided by the AnyDSL runtime library */
  cpu_intrinsics.exp(a)
}

/* Write f64 (double) data to a buffer, considering it as an array of doubles */
fn write_f64(buffer : Buffer, index : i32, value : f64) -> () {
  (buffer.data as &mut[f64])(index) = value;
}

/* Read f64 (double) from a buffer, considering it as an array of doubles */
fn read_f64(buffer : Buffer, index : i32) -> f64 {
  (buffer.data as &[f64])(index)
}

/* Sets image pixel at (x, y) coordinates */
fn set_pixel(img : image, x : i32, y : i32, value : f64) -> () {
  let converted_data = img.buffer.data as &mut[f64];
  converted_data(y * img.width + x) = value;
}

/* Gets image pixel at (x, y) coordinates */
fn get_pixel(img : image, x : i32, y : i32) -> f64 {
  let converted_data = img.buffer.data as &[f64];
  converted_data(y * img.width + x)
}

/* Gets 1D filter coefficient at i index */
fn get_1d_filter_coeff(filt : filter, i : i32) -> f64 {
  let converted_data = filt.buffer.data as &[f64];
  converted_data(i)
}

/* Gets 2D filter coefficient at (i, j) index */
fn get_2d_filter_coeff(filt : filter, i : i32, j : i32) -> f64 {
  let converted_data = filt.buffer.data as &[f64];
  converted_data(j * filt.width + i) 
}

/* Create temporary image */
fn create_temporary_image(width : i32, height : i32) -> image {
  /* Null buffer that musn't be used */
  let null_buffer = Buffer {
    device: 0,
    data: 0 as &[i8]
  };

  /* Create image object and return it */
  image {
    buffer: alloc_cpu(width * height * sizeof[f64]()),
    device_data: null_buffer,
    width: width,
    height: height
  }
}

/* Get device data for image */
fn get_image_device_data(img : image) -> Buffer {
  /* Returns a null buffer since host data is used in CPU */
  Buffer {
    device: 0,
    data: 0 as &[i8]
  }
}

/* Release image data from target device */
fn release_image(img : image) -> () {
  /* Does nothing */
}

/* Release filter data from target device */
fn release_filter(filt : filter) -> () {
  /* Does nothing */
}

/* Specify input and output images where operations will be performed */
fn images(input_image : image, output_image : image, body: fn() -> ()) -> () {
  /* For CPU, just execute the operations directly */
  body();
}

/* Iterates over an image in CPU */
fn iterate(input_image : image, body : fn(i32, i32) -> ()) -> () {
  /* Go through the image lines */
  for y in range(0, input_image.height) {
    /* Go through the image columns */
    for x in range(0, input_image.width) {
      /* Call the body function with the obtained indexes */
      body(x, y);
    }
  }
}

/* Iterates over an image in CPU */
fn iterate_stencil(input_image : image, stencil : filter, body : fn(i32, i32, image) -> ()) -> () {
  /* Go through the image lines */
  for y in range(0, input_image.height) {
    /* Go through the image columns */
    for x in range(0, input_image.width) {
      /* Call the body function with the obtained indexes */
      body(x, y, input_image);
    }
  }
}


/* Generates a 5x1 filter data structure given its coefficients */
fn filter_5x1(mask : Buffer, is_row : bool) -> filter {
  /* Filter result */
  let mut result : filter;

  /* Allocates the filter data structure for a 5x1 column filter */
  if !is_row {
    result = filter {
      buffer: mask,
      width: 5,
      height: 1
    };
  /* Allocates the filter data structure for a 5x1 row filter */
  } else {
    result = filter {
      buffer: mask,
      width: 1,
      height: 5
    };
  }

  result
}

/* Generates a 5x5 filter data structure given its coefficients */
fn filter_5x5(mask : Buffer) -> filter {
  /* Allocates the filter data structure for a 5x5 filter */
  filter {
    buffer: mask,
    width: 5,
    height: 5
  }
}

/* Generates a 7x1 filter data structure given its coefficients */
fn filter_7x1(mask : Buffer, is_row : bool) -> filter {
  /* Filter result */
  let mut result : filter;

  /* Allocates the filter data structure for a 7x1 column filter */
  if !is_row {
    result = filter {
      buffer: mask,
      width: 7,
      height: 1
    };
  /* Allocates the filter data structure for a 7x1 row filter */
  } else {
    result = filter {
      buffer: mask,
      width: 1,
      height: 7
    };
  }

  result
}

/* Generates a 7x7 filter data structure given its coefficients */
fn filter_7x7(mask : Buffer) -> filter {
  /* Allocates the filter data structure for a 7x7 filter */
  filter {
    buffer: mask,
    width: 7,
    height: 7
  }
}
