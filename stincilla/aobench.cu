extern "C" {
typedef struct {
    double e0;
    double e1;
    double e2;
} struct_vec_9645;
typedef struct {
    double e0;
    struct_vec_9645 e1;
    struct_vec_9645 e2;
    int e3;
} struct_Isect_9647;

__device__ inline int threadIdx_x() { return threadIdx.x; }
__device__ inline int threadIdx_y() { return threadIdx.y; }
__device__ inline int threadIdx_z() { return threadIdx.z; }
__device__ inline int blockIdx_x() { return blockIdx.x; }
__device__ inline int blockIdx_y() { return blockIdx.y; }
__device__ inline int blockIdx_z() { return blockIdx.z; }
__device__ inline int blockDim_x() { return blockDim.x; }
__device__ inline int blockDim_y() { return blockDim.y; }
__device__ inline int blockDim_z() { return blockDim.z; }
__device__ inline int gridDim_x() { return gridDim.x; }
__device__ inline int gridDim_y() { return gridDim.y; }
__device__ inline int gridDim_z() { return gridDim.z; }
__global__ void lambda_71814(unsigned long*, unsigned char*);

__global__ __launch_bounds__ (32 * 4 * 1) void lambda_71814(unsigned long* _71817_104835, unsigned char* _71818_104836) {
    int  threadIdx_y_104842;
    int pthreadIdx_y_104842;
    int  blockDim_y_104848;
    int pblockDim_y_104848;
    int  blockIdx_y_104854;
    int pblockIdx_y_104854;
    int  threadIdx_x_104860;
    int pthreadIdx_x_104860;
    int  blockDim_x_104866;
    int pblockDim_x_104866;
    int  blockIdx_x_104872;
    int pblockIdx_x_104872;
    int  threadIdx_x_104886;
    int pthreadIdx_x_104886;
    int  blockDim_x_104889;
    int pblockDim_x_104889;
    int  blockIdx_x_104892;
    int pblockIdx_x_104892;
    int  threadIdx_y_104895;
    int pthreadIdx_y_104895;
    int  blockDim_y_104898;
    int pblockDim_y_104898;
    int  blockIdx_y_104901;
    int pblockIdx_y_104901;
    int  lower_104904;
    int plower_104904;
    int  upper_104905;
    int pupper_104905;
    int  step_104906;
    int pstep_104906;
    double  r_104907;
    double pr_104907;
    double  g_104908;
    double pg_104908;
    double  b_104909;
    double pb_104909;
    unsigned long  state_104910;
    unsigned long pstate_104910;
    int  _107577;
    int p_107577;
    int  _107582;
    int p_107582;
    int  _107589;
    int p_107589;
    int  _107593;
    int p_107593;
    int  _107600;
    int p_107600;
    int  _107604;
    int p_107604;
    int  threadIdx_y_107607;
    int pthreadIdx_y_107607;
    int  blockDim_y_107610;
    int pblockDim_y_107610;
    int  blockIdx_y_107613;
    int pblockIdx_y_107613;
    int  threadIdx_x_107616;
    int pthreadIdx_x_107616;
    int  blockDim_x_107619;
    int pblockDim_x_107619;
    int  blockIdx_x_107622;
    int pblockIdx_x_107622;
    int  threadIdx_y_107636;
    int pthreadIdx_y_107636;
    int  blockDim_y_107639;
    int pblockDim_y_107639;
    int  blockIdx_y_107642;
    int pblockIdx_y_107642;
    int  threadIdx_x_107645;
    int pthreadIdx_x_107645;
    int  blockDim_x_107648;
    int pblockDim_x_107648;
    int  blockIdx_x_107651;
    int pblockIdx_x_107651;
    int  threadIdx_y_107665;
    int pthreadIdx_y_107665;
    int  blockDim_y_107668;
    int pblockDim_y_107668;
    int  blockIdx_y_107671;
    int pblockIdx_y_107671;
    int  threadIdx_x_107674;
    int pthreadIdx_x_107674;
    int  blockDim_x_107677;
    int pblockDim_x_107677;
    int  blockIdx_x_107680;
    int pblockIdx_x_107680;
    int  lower_104915;
    int plower_104915;
    int  upper_104916;
    int pupper_104916;
    int  step_104917;
    int pstep_104917;
    double  r_104918;
    double pr_104918;
    double  g_104919;
    double pg_104919;
    double  b_104920;
    double pb_104920;
    unsigned long  state_104921;
    unsigned long pstate_104921;
    double  length_104955;
    double plength_104955;
    double  _104962;
    double p_104962;
    struct_vec_9645  vnormalize_104968;
    struct_vec_9645 pvnormalize_104968;
    double  _104988;
    double p_104988;
    double  length_105014;
    double plength_105014;
    double  _105017;
    double p_105017;
    struct_vec_9645  vnormalize_105022;
    struct_vec_9645 pvnormalize_105022;
    struct_Isect_9647  ray_sphere_intersect_105025;
    struct_Isect_9647 pray_sphere_intersect_105025;
    double  _105039;
    double p_105039;
    double  length_105065;
    double plength_105065;
    double  _105068;
    double p_105068;
    struct_vec_9645  vnormalize_105073;
    struct_vec_9645 pvnormalize_105073;
    struct_Isect_9647  ray_sphere_intersect_105076;
    struct_Isect_9647 pray_sphere_intersect_105076;
    double  _105090;
    double p_105090;
    double  length_105115;
    double plength_105115;
    double  _105118;
    double p_105118;
    struct_vec_9645  vnormalize_105123;
    struct_vec_9645 pvnormalize_105123;
    struct_Isect_9647  ray_sphere_intersect_105126;
    struct_Isect_9647 pray_sphere_intersect_105126;
    double  _105134;
    double p_105134;
    struct_Isect_9647  ray_plane_intersect_105145;
    struct_Isect_9647 pray_plane_intersect_105145;
    double  _105160;
    double p_105160;
    double  _105161;
    double p_105161;
    double  _105162;
    double p_105162;
    double  length_105181;
    double plength_105181;
    double  _105184;
    double p_105184;
    struct_vec_9645  vnormalize_105189;
    struct_vec_9645 pvnormalize_105189;
    double  length_105209;
    double plength_105209;
    double  _105212;
    double p_105212;
    struct_vec_9645  vnormalize_105217;
    struct_vec_9645 pvnormalize_105217;
    int  lower_105220;
    int plower_105220;
    int  upper_105221;
    int pupper_105221;
    int  step_105222;
    int pstep_105222;
    double  occlusion_105223;
    double pocclusion_105223;
    unsigned long  state_105224;
    unsigned long pstate_105224;
    double  r_107461;
    double pr_107461;
    double  g_107462;
    double pg_107462;
    double  b_107463;
    double pb_107463;
    unsigned long  state_107464;
    unsigned long pstate_107464;
    double  theta_105239;
    double ptheta_105239;
    double  _105258;
    double p_105258;
    double  _105265;
    double p_105265;
    double  z_105270;
    double pz_105270;
    double  _105323;
    double p_105323;
    double  length_105346;
    double plength_105346;
    double  _105349;
    double p_105349;
    struct_vec_9645  vnormalize_105354;
    struct_vec_9645 pvnormalize_105354;
    struct_Isect_9647  ray_sphere_intersect_105357;
    struct_Isect_9647 pray_sphere_intersect_105357;
    double  _105375;
    double p_105375;
    double  length_105399;
    double plength_105399;
    double  _105402;
    double p_105402;
    struct_vec_9645  vnormalize_105407;
    struct_vec_9645 pvnormalize_105407;
    struct_Isect_9647  ray_sphere_intersect_105410;
    struct_Isect_9647 pray_sphere_intersect_105410;
    double  _105428;
    double p_105428;
    double  length_105452;
    double plength_105452;
    double  _105455;
    double p_105455;
    struct_vec_9645  vnormalize_105460;
    struct_vec_9645 pvnormalize_105460;
    struct_Isect_9647  ray_sphere_intersect_105463;
    struct_Isect_9647 pray_sphere_intersect_105463;
    double  _105471;
    double p_105471;
    struct_Isect_9647  ray_plane_intersect_105489;
    struct_Isect_9647 pray_plane_intersect_105489;
    double  occlusion_105495;
    double pocclusion_105495;
    double  theta_105507;
    double ptheta_105507;
    double  _105520;
    double p_105520;
    double  _105523;
    double p_105523;
    double  z_105528;
    double pz_105528;
    double  _105557;
    double p_105557;
    double  length_105580;
    double plength_105580;
    double  _105583;
    double p_105583;
    struct_vec_9645  vnormalize_105588;
    struct_vec_9645 pvnormalize_105588;
    struct_Isect_9647  ray_sphere_intersect_105591;
    struct_Isect_9647 pray_sphere_intersect_105591;
    double  _105602;
    double p_105602;
    double  length_105626;
    double plength_105626;
    double  _105629;
    double p_105629;
    struct_vec_9645  vnormalize_105634;
    struct_vec_9645 pvnormalize_105634;
    struct_Isect_9647  ray_sphere_intersect_105637;
    struct_Isect_9647 pray_sphere_intersect_105637;
    double  _105648;
    double p_105648;
    double  length_105672;
    double plength_105672;
    double  _105675;
    double p_105675;
    struct_vec_9645  vnormalize_105680;
    struct_vec_9645 pvnormalize_105680;
    struct_Isect_9647  ray_sphere_intersect_105683;
    struct_Isect_9647 pray_sphere_intersect_105683;
    double  _105691;
    double p_105691;
    struct_Isect_9647  ray_plane_intersect_105702;
    struct_Isect_9647 pray_plane_intersect_105702;
    double  occlusion_105708;
    double pocclusion_105708;
    double  theta_105720;
    double ptheta_105720;
    double  _105733;
    double p_105733;
    double  _105736;
    double p_105736;
    double  z_105741;
    double pz_105741;
    double  _105770;
    double p_105770;
    double  length_105793;
    double plength_105793;
    double  _105796;
    double p_105796;
    struct_vec_9645  vnormalize_105801;
    struct_vec_9645 pvnormalize_105801;
    struct_Isect_9647  ray_sphere_intersect_105804;
    struct_Isect_9647 pray_sphere_intersect_105804;
    double  _105815;
    double p_105815;
    double  length_105839;
    double plength_105839;
    double  _105842;
    double p_105842;
    struct_vec_9645  vnormalize_105847;
    struct_vec_9645 pvnormalize_105847;
    struct_Isect_9647  ray_sphere_intersect_105850;
    struct_Isect_9647 pray_sphere_intersect_105850;
    double  _105861;
    double p_105861;
    double  length_105885;
    double plength_105885;
    double  _105888;
    double p_105888;
    struct_vec_9645  vnormalize_105893;
    struct_vec_9645 pvnormalize_105893;
    struct_Isect_9647  ray_sphere_intersect_105896;
    struct_Isect_9647 pray_sphere_intersect_105896;
    double  _105904;
    double p_105904;
    struct_Isect_9647  ray_plane_intersect_105915;
    struct_Isect_9647 pray_plane_intersect_105915;
    double  occlusion_105921;
    double pocclusion_105921;
    double  theta_105933;
    double ptheta_105933;
    double  _105946;
    double p_105946;
    double  _105949;
    double p_105949;
    double  z_105954;
    double pz_105954;
    double  _105983;
    double p_105983;
    double  length_106006;
    double plength_106006;
    double  _106009;
    double p_106009;
    struct_vec_9645  vnormalize_106014;
    struct_vec_9645 pvnormalize_106014;
    struct_Isect_9647  ray_sphere_intersect_106017;
    struct_Isect_9647 pray_sphere_intersect_106017;
    double  _106028;
    double p_106028;
    double  length_106052;
    double plength_106052;
    double  _106055;
    double p_106055;
    struct_vec_9645  vnormalize_106060;
    struct_vec_9645 pvnormalize_106060;
    struct_Isect_9647  ray_sphere_intersect_106063;
    struct_Isect_9647 pray_sphere_intersect_106063;
    double  _106074;
    double p_106074;
    double  length_106098;
    double plength_106098;
    double  _106101;
    double p_106101;
    struct_vec_9645  vnormalize_106106;
    struct_vec_9645 pvnormalize_106106;
    struct_Isect_9647  ray_sphere_intersect_106109;
    struct_Isect_9647 pray_sphere_intersect_106109;
    double  _106117;
    double p_106117;
    struct_Isect_9647  ray_plane_intersect_106128;
    struct_Isect_9647 pray_plane_intersect_106128;
    double  occlusion_106134;
    double pocclusion_106134;
    double  theta_106146;
    double ptheta_106146;
    double  _106159;
    double p_106159;
    double  _106162;
    double p_106162;
    double  z_106167;
    double pz_106167;
    double  _106196;
    double p_106196;
    double  length_106219;
    double plength_106219;
    double  _106222;
    double p_106222;
    struct_vec_9645  vnormalize_106227;
    struct_vec_9645 pvnormalize_106227;
    struct_Isect_9647  ray_sphere_intersect_106230;
    struct_Isect_9647 pray_sphere_intersect_106230;
    double  _106241;
    double p_106241;
    double  length_106265;
    double plength_106265;
    double  _106268;
    double p_106268;
    struct_vec_9645  vnormalize_106273;
    struct_vec_9645 pvnormalize_106273;
    struct_Isect_9647  ray_sphere_intersect_106276;
    struct_Isect_9647 pray_sphere_intersect_106276;
    double  _106287;
    double p_106287;
    double  length_106311;
    double plength_106311;
    double  _106314;
    double p_106314;
    struct_vec_9645  vnormalize_106319;
    struct_vec_9645 pvnormalize_106319;
    struct_Isect_9647  ray_sphere_intersect_106322;
    struct_Isect_9647 pray_sphere_intersect_106322;
    double  _106330;
    double p_106330;
    struct_Isect_9647  ray_plane_intersect_106341;
    struct_Isect_9647 pray_plane_intersect_106341;
    double  occlusion_106347;
    double pocclusion_106347;
    double  theta_106359;
    double ptheta_106359;
    double  _106372;
    double p_106372;
    double  _106375;
    double p_106375;
    double  z_106380;
    double pz_106380;
    double  _106409;
    double p_106409;
    double  length_106432;
    double plength_106432;
    double  _106435;
    double p_106435;
    struct_vec_9645  vnormalize_106440;
    struct_vec_9645 pvnormalize_106440;
    struct_Isect_9647  ray_sphere_intersect_106443;
    struct_Isect_9647 pray_sphere_intersect_106443;
    double  _106454;
    double p_106454;
    double  length_106478;
    double plength_106478;
    double  _106481;
    double p_106481;
    struct_vec_9645  vnormalize_106486;
    struct_vec_9645 pvnormalize_106486;
    struct_Isect_9647  ray_sphere_intersect_106489;
    struct_Isect_9647 pray_sphere_intersect_106489;
    double  _106500;
    double p_106500;
    double  length_106524;
    double plength_106524;
    double  _106527;
    double p_106527;
    struct_vec_9645  vnormalize_106532;
    struct_vec_9645 pvnormalize_106532;
    struct_Isect_9647  ray_sphere_intersect_106535;
    struct_Isect_9647 pray_sphere_intersect_106535;
    double  _106543;
    double p_106543;
    struct_Isect_9647  ray_plane_intersect_106554;
    struct_Isect_9647 pray_plane_intersect_106554;
    double  occlusion_106560;
    double pocclusion_106560;
    double  theta_106572;
    double ptheta_106572;
    double  _106585;
    double p_106585;
    double  _106588;
    double p_106588;
    double  z_106593;
    double pz_106593;
    double  _106622;
    double p_106622;
    double  length_106645;
    double plength_106645;
    double  _106648;
    double p_106648;
    struct_vec_9645  vnormalize_106653;
    struct_vec_9645 pvnormalize_106653;
    struct_Isect_9647  ray_sphere_intersect_106656;
    struct_Isect_9647 pray_sphere_intersect_106656;
    double  _106667;
    double p_106667;
    double  length_106691;
    double plength_106691;
    double  _106694;
    double p_106694;
    struct_vec_9645  vnormalize_106699;
    struct_vec_9645 pvnormalize_106699;
    struct_Isect_9647  ray_sphere_intersect_106702;
    struct_Isect_9647 pray_sphere_intersect_106702;
    double  _106713;
    double p_106713;
    double  length_106737;
    double plength_106737;
    double  _106740;
    double p_106740;
    struct_vec_9645  vnormalize_106745;
    struct_vec_9645 pvnormalize_106745;
    struct_Isect_9647  ray_sphere_intersect_106748;
    struct_Isect_9647 pray_sphere_intersect_106748;
    double  _106756;
    double p_106756;
    struct_Isect_9647  ray_plane_intersect_106767;
    struct_Isect_9647 pray_plane_intersect_106767;
    double  occlusion_106773;
    double pocclusion_106773;
    double  theta_106785;
    double ptheta_106785;
    double  _106798;
    double p_106798;
    double  _106801;
    double p_106801;
    double  z_106806;
    double pz_106806;
    double  _106835;
    double p_106835;
    double  length_106858;
    double plength_106858;
    double  _106861;
    double p_106861;
    struct_vec_9645  vnormalize_106866;
    struct_vec_9645 pvnormalize_106866;
    struct_Isect_9647  ray_sphere_intersect_106869;
    struct_Isect_9647 pray_sphere_intersect_106869;
    double  _106880;
    double p_106880;
    double  length_106904;
    double plength_106904;
    double  _106907;
    double p_106907;
    struct_vec_9645  vnormalize_106912;
    struct_vec_9645 pvnormalize_106912;
    struct_Isect_9647  ray_sphere_intersect_106915;
    struct_Isect_9647 pray_sphere_intersect_106915;
    double  _106926;
    double p_106926;
    double  length_106950;
    double plength_106950;
    double  _106953;
    double p_106953;
    struct_vec_9645  vnormalize_106958;
    struct_vec_9645 pvnormalize_106958;
    struct_Isect_9647  ray_sphere_intersect_106961;
    struct_Isect_9647 pray_sphere_intersect_106961;
    double  _106969;
    double p_106969;
    struct_Isect_9647  ray_plane_intersect_106980;
    struct_Isect_9647 pray_plane_intersect_106980;
    double  occlusion_106986;
    double pocclusion_106986;
    threadIdx_y_104842 = threadIdx_y();
    pthreadIdx_y_104842 = threadIdx_y_104842;
    l104840: ;
        threadIdx_y_104842 = pthreadIdx_y_104842;
        blockDim_y_104848 = blockDim_y();
        pblockDim_y_104848 = blockDim_y_104848;
    l104846: ;
        blockDim_y_104848 = pblockDim_y_104848;
        blockIdx_y_104854 = blockIdx_y();
        pblockIdx_y_104854 = blockIdx_y_104854;
    l104852: ;
        blockIdx_y_104854 = pblockIdx_y_104854;
        threadIdx_x_104860 = threadIdx_x();
        pthreadIdx_x_104860 = threadIdx_x_104860;
    l104858: ;
        threadIdx_x_104860 = pthreadIdx_x_104860;
        blockDim_x_104866 = blockDim_x();
        pblockDim_x_104866 = blockDim_x_104866;
    l104864: ;
        blockDim_x_104866 = pblockDim_x_104866;
        blockIdx_x_104872 = blockIdx_x();
        pblockIdx_x_104872 = blockIdx_x_104872;
    l104870: ;
        blockIdx_x_104872 = pblockIdx_x_104872;
        int _104877;
        _104877 = blockDim_x_104866 * blockIdx_x_104872;
        int _104874;
        _104874 = blockDim_y_104848 * blockIdx_y_104854;
        int _104875;
        _104875 = threadIdx_y_104842 + _104874;
        int _104878;
        _104878 = threadIdx_x_104860 + _104877;
        int _104876;
        _104876 = 256 * _104875;
        int _104879;
        _104879 = _104876 + _104878;
        unsigned long* _104880;
        _104880 = _71817_104835 + _104879;
        unsigned long _104881;
        _104881 = *_104880;
        threadIdx_x_104886 = threadIdx_x();
        pthreadIdx_x_104886 = threadIdx_x_104886;
    l104884: ;
        threadIdx_x_104886 = pthreadIdx_x_104886;
        blockDim_x_104889 = blockDim_x();
        pblockDim_x_104889 = blockDim_x_104889;
    l104887: ;
        blockDim_x_104889 = pblockDim_x_104889;
        blockIdx_x_104892 = blockIdx_x();
        pblockIdx_x_104892 = blockIdx_x_104892;
    l104890: ;
        blockIdx_x_104892 = pblockIdx_x_104892;
        threadIdx_y_104895 = threadIdx_y();
        pthreadIdx_y_104895 = threadIdx_y_104895;
    l104893: ;
        threadIdx_y_104895 = pthreadIdx_y_104895;
        blockDim_y_104898 = blockDim_y();
        pblockDim_y_104898 = blockDim_y_104898;
    l104896: ;
        blockDim_y_104898 = pblockDim_y_104898;
        blockIdx_y_104901 = blockIdx_y();
        pblockIdx_y_104901 = blockIdx_y_104901;
    l104899: ;
        blockIdx_y_104901 = pblockIdx_y_104901;
        int _104929;
        _104929 = blockDim_x_104889 * blockIdx_x_104892;
        unsigned long state_107698;
        state_107698 = _104881;
        int _104930;
        _104930 = threadIdx_x_104886 + _104929;
        int _104941;
        _104941 = blockDim_y_104898 * blockIdx_y_104901;
        double _104931;
        _104931 = (double)_104930;
        int _104942;
        _104942 = threadIdx_y_104895 + _104941;
        double _104943;
        _104943 = (double)_104942;
        plower_104904 = 0;
        pupper_104905 = 2;
        pstep_104906 = 1;
        pr_104907 = 0.000000e+00;
        pg_104908 = 0.000000e+00;
        pb_104909 = 0.000000e+00;
        pstate_104910 = state_107698;
        goto l104902;
    l104902: ;
        lower_104904 = plower_104904;
        upper_104905 = pupper_104905;
        step_104906 = pstep_104906;
        r_104907 = pr_104907;
        g_104908 = pg_104908;
        b_104909 = pb_104909;
        state_104910 = pstate_104910;
        bool _104911;
        _104911 = lower_104904 < upper_104905;
        if (_104911) goto l104912; else goto l107568;
    l107568: ;
        double _107571;
        _107571 = r_104907 / 4.000000e+00;
        double _107572;
        _107572 = 2.555000e+02 * _107571;
        int i_107573;
        i_107573 = (int)_107572;
        bool _107574;
        _107574 = i_107573 < 0;
        if (_107574) goto l107575; else goto l107697;
    l107697: ;
        p_107577 = i_107573;
        goto l107576;
    l107575: ;
        p_107577 = 0;
        goto l107576;
    l107576: ;
        _107577 = p_107577;
        bool _107579;
        _107579 = 255 < _107577;
        if (_107579) goto l107580; else goto l107696;
    l107696: ;
        p_107582 = _107577;
        goto l107581;
    l107580: ;
        p_107582 = 255;
        goto l107581;
    l107581: ;
        _107582 = p_107582;
        double _107583;
        _107583 = g_104908 / 4.000000e+00;
        double _107584;
        _107584 = 2.555000e+02 * _107583;
        int i_107585;
        i_107585 = (int)_107584;
        bool _107586;
        _107586 = i_107585 < 0;
        if (_107586) goto l107587; else goto l107695;
    l107695: ;
        p_107589 = i_107585;
        goto l107588;
    l107587: ;
        p_107589 = 0;
        goto l107588;
    l107588: ;
        _107589 = p_107589;
        bool _107590;
        _107590 = 255 < _107589;
        if (_107590) goto l107591; else goto l107694;
    l107694: ;
        p_107593 = _107589;
        goto l107592;
    l107591: ;
        p_107593 = 255;
        goto l107592;
    l107592: ;
        _107593 = p_107593;
        double _107594;
        _107594 = b_104909 / 4.000000e+00;
        double _107595;
        _107595 = 2.555000e+02 * _107594;
        int i_107596;
        i_107596 = (int)_107595;
        bool _107597;
        _107597 = i_107596 < 0;
        if (_107597) goto l107598; else goto l107693;
    l107693: ;
        p_107600 = i_107596;
        goto l107599;
    l107598: ;
        p_107600 = 0;
        goto l107599;
    l107599: ;
        _107600 = p_107600;
        bool _107601;
        _107601 = 255 < _107600;
        if (_107601) goto l107602; else goto l107692;
    l107692: ;
        p_107604 = _107600;
        goto l107603;
    l107602: ;
        p_107604 = 255;
        goto l107603;
    l107603: ;
        _107604 = p_107604;
        threadIdx_y_107607 = threadIdx_y();
        pthreadIdx_y_107607 = threadIdx_y_107607;
    l107605: ;
        threadIdx_y_107607 = pthreadIdx_y_107607;
        blockDim_y_107610 = blockDim_y();
        pblockDim_y_107610 = blockDim_y_107610;
    l107608: ;
        blockDim_y_107610 = pblockDim_y_107610;
        blockIdx_y_107613 = blockIdx_y();
        pblockIdx_y_107613 = blockIdx_y_107613;
    l107611: ;
        blockIdx_y_107613 = pblockIdx_y_107613;
        threadIdx_x_107616 = threadIdx_x();
        pthreadIdx_x_107616 = threadIdx_x_107616;
    l107614: ;
        threadIdx_x_107616 = pthreadIdx_x_107616;
        blockDim_x_107619 = blockDim_x();
        pblockDim_x_107619 = blockDim_x_107619;
    l107617: ;
        blockDim_x_107619 = pblockDim_x_107619;
        blockIdx_x_107622 = blockIdx_x();
        pblockIdx_x_107622 = blockIdx_x_107622;
    l107620: ;
        blockIdx_x_107622 = pblockIdx_x_107622;
        int _107624;
        _107624 = blockDim_y_107610 * blockIdx_y_107613;
        int _107627;
        _107627 = blockDim_x_107619 * blockIdx_x_107622;
        int _107628;
        _107628 = threadIdx_x_107616 + _107627;
        unsigned char _107632;
        _107632 = (unsigned char)_107582;
        int _107625;
        _107625 = threadIdx_y_107607 + _107624;
        int _107626;
        _107626 = 256 * _107625;
        int _107629;
        _107629 = _107626 + _107628;
        int _107630;
        _107630 = 3 * _107629;
        unsigned char* _107631;
        _107631 = _71818_104836 + _107630;
        *_107631 = _107632;
        threadIdx_y_107636 = threadIdx_y();
        pthreadIdx_y_107636 = threadIdx_y_107636;
    l107634: ;
        threadIdx_y_107636 = pthreadIdx_y_107636;
        blockDim_y_107639 = blockDim_y();
        pblockDim_y_107639 = blockDim_y_107639;
    l107637: ;
        blockDim_y_107639 = pblockDim_y_107639;
        blockIdx_y_107642 = blockIdx_y();
        pblockIdx_y_107642 = blockIdx_y_107642;
    l107640: ;
        blockIdx_y_107642 = pblockIdx_y_107642;
        threadIdx_x_107645 = threadIdx_x();
        pthreadIdx_x_107645 = threadIdx_x_107645;
    l107643: ;
        threadIdx_x_107645 = pthreadIdx_x_107645;
        blockDim_x_107648 = blockDim_x();
        pblockDim_x_107648 = blockDim_x_107648;
    l107646: ;
        blockDim_x_107648 = pblockDim_x_107648;
        blockIdx_x_107651 = blockIdx_x();
        pblockIdx_x_107651 = blockIdx_x_107651;
    l107649: ;
        blockIdx_x_107651 = pblockIdx_x_107651;
        int _107652;
        _107652 = blockDim_y_107639 * blockIdx_y_107642;
        int _107655;
        _107655 = blockDim_x_107648 * blockIdx_x_107651;
        int _107656;
        _107656 = threadIdx_x_107645 + _107655;
        unsigned char _107661;
        _107661 = (unsigned char)_107593;
        int _107653;
        _107653 = threadIdx_y_107636 + _107652;
        int _107654;
        _107654 = 256 * _107653;
        int _107657;
        _107657 = _107654 + _107656;
        int _107658;
        _107658 = 3 * _107657;
        int _107659;
        _107659 = 1 + _107658;
        unsigned char* _107660;
        _107660 = _71818_104836 + _107659;
        *_107660 = _107661;
        threadIdx_y_107665 = threadIdx_y();
        pthreadIdx_y_107665 = threadIdx_y_107665;
    l107663: ;
        threadIdx_y_107665 = pthreadIdx_y_107665;
        blockDim_y_107668 = blockDim_y();
        pblockDim_y_107668 = blockDim_y_107668;
    l107666: ;
        blockDim_y_107668 = pblockDim_y_107668;
        blockIdx_y_107671 = blockIdx_y();
        pblockIdx_y_107671 = blockIdx_y_107671;
    l107669: ;
        blockIdx_y_107671 = pblockIdx_y_107671;
        threadIdx_x_107674 = threadIdx_x();
        pthreadIdx_x_107674 = threadIdx_x_107674;
    l107672: ;
        threadIdx_x_107674 = pthreadIdx_x_107674;
        blockDim_x_107677 = blockDim_x();
        pblockDim_x_107677 = blockDim_x_107677;
    l107675: ;
        blockDim_x_107677 = pblockDim_x_107677;
        blockIdx_x_107680 = blockIdx_x();
        pblockIdx_x_107680 = blockIdx_x_107680;
    l107678: ;
        blockIdx_x_107680 = pblockIdx_x_107680;
        int _107684;
        _107684 = blockDim_x_107677 * blockIdx_x_107680;
        int _107681;
        _107681 = blockDim_y_107668 * blockIdx_y_107671;
        unsigned char _107690;
        _107690 = (unsigned char)_107604;
        int _107685;
        _107685 = threadIdx_x_107674 + _107684;
        int _107682;
        _107682 = threadIdx_y_107665 + _107681;
        int _107683;
        _107683 = 256 * _107682;
        int _107686;
        _107686 = _107683 + _107685;
        int _107687;
        _107687 = 3 * _107686;
        int _107688;
        _107688 = 2 + _107687;
        unsigned char* _107689;
        _107689 = _71818_104836 + _107688;
        *_107689 = _107690;
        return ;
    l104912: ;
        double _104944;
        _104944 = (double)lower_104904;
        double _104945;
        _104945 = _104944 / 2.000000e+00;
        double _104946;
        _104946 = _104943 + _104945;
        double _104947;
        _104947 = _104946 - 1.280000e+02;
        double _104948;
        _104948 = -0.000000e+00 - _104947;
        double py_104949;
        py_104949 = _104948 / 1.280000e+02;
        double _104950;
        _104950 = py_104949 * py_104949;
        plower_104915 = 0;
        pupper_104916 = 2;
        pstep_104917 = 1;
        pr_104918 = r_104907;
        pg_104919 = g_104908;
        pb_104920 = b_104909;
        pstate_104921 = state_104910;
        goto l104913;
    l104913: ;
        lower_104915 = plower_104915;
        upper_104916 = pupper_104916;
        step_104917 = pstep_104917;
        r_104918 = pr_104918;
        g_104919 = pg_104919;
        b_104920 = pb_104920;
        state_104921 = pstate_104921;
        bool _104922;
        _104922 = lower_104915 < upper_104916;
        if (_104922) goto l104923; else goto l107565;
    l107565: ;
        int _107566;
        _107566 = lower_104904 + step_104906;
        plower_104904 = _107566;
        pupper_104905 = upper_104905;
        pstep_104906 = step_104906;
        pr_104907 = r_104918;
        pg_104908 = g_104919;
        pb_104909 = b_104920;
        pstate_104910 = state_104921;
        goto l104902;
    l104923: ;
        double _104932;
        _104932 = (double)lower_104915;
        double _104934;
        _104934 = _104932 / 2.000000e+00;
        double _104935;
        _104935 = _104931 + _104934;
        double _104937;
        _104937 = _104935 - 1.280000e+02;
        double px_104938;
        px_104938 = _104937 / 1.280000e+02;
        double _104939;
        _104939 = px_104938 * px_104938;
        double _104951;
        _104951 = _104939 + _104950;
        double _104952;
        _104952 = 1.000000e+00 + _104951;
        length_104955 = sqrt(_104952);
        plength_104955 = length_104955;
    l104953: ;
        length_104955 = plength_104955;
        _104962 = fabs(length_104955);
        p_104962 = _104962;
    l104960: ;
        _104962 = p_104962;
        bool _104964;
        _104964 = 1.000000e-17 < _104962;
        if (_104964) goto l104965; else goto l107563;
    l107563: ;
        struct_vec_9645 _107564;
        _107564.e0 = px_104938;
        _107564.e1 = py_104949;
        _107564.e2 = -1.000000e+00;
        pvnormalize_104968 = _107564;
        goto l104966;
    l104965: ;
        double _107561;
        _107561 = -1.000000e+00 / length_104955;
        double _107559;
        _107559 = px_104938 / length_104955;
        double _107560;
        _107560 = py_104949 / length_104955;
        struct_vec_9645 _107562;
        _107562.e0 = _107559;
        _107562.e1 = _107560;
        _107562.e2 = _107561;
        pvnormalize_104968 = _107562;
        goto l104966;
    l104966: ;
        vnormalize_104968 = pvnormalize_104968;
        double _104970;
        _104970 = vnormalize_104968.e0;
        double _104978;
        _104978 = vnormalize_104968.e2;
        double _104973;
        _104973 = vnormalize_104968.e1;
        double _104971;
        _104971 = 2.000000e+00 * _104970;
        double _104979;
        _104979 = 3.500000e+00 * _104978;
        double _104974;
        _104974 = 0.000000e+00 * _104973;
        double _104975;
        _104975 = _104971 + _104974;
        double _104980;
        _104980 = _104975 + _104979;
        double _104981;
        _104981 = _104980 * _104980;
        double D_104983;
        D_104983 = _104981 - 1.600000e+01;
        bool _104984;
        _104984 = 0.000000e+00 < D_104983;
        if (_104984) goto l104985; else goto l107558;
    l107558: ;
        goto l107555;
    l104985: ;
        _104988 = sqrt(D_104983);
        p_104988 = _104988;
    l104986: ;
        _104988 = p_104988;
        double _104989;
        _104989 = -0.000000e+00 - _104980;
        double t_104990;
        t_104990 = _104989 - _104988;
        bool _104991;
        _104991 = 0.000000e+00 < t_104990;
        if (_104991) goto l104992; else goto l107557;
    l107557: ;
        goto l107554;
    l104992: ;
        bool _104994;
        _104994 = t_104990 < 1.000000e+17;
        if (_104994) goto l104995; else goto l107553;
    l107553: ;
        goto l107554;
    l107554: ;
        goto l107555;
    l107555: ;
        struct_Isect_9647 _107049_64;
        _107049_64.e0 = 1.000000e+17;
        // bottom: _107049_64.e1 = // bottom: struct_vec_9645 _107047_68;;
        // bottom: _107049_64.e2 = _107047_68;
        _107049_64.e3 = 0;
        pray_sphere_intersect_105025 = _107049_64;
        goto l105023;
    l104995: ;
        double _104996;
        _104996 = _104970 * t_104990;
        double _105001;
        _105001 = _104973 * t_104990;
        double _105006;
        _105006 = _104978 * t_104990;
        double _104997;
        _104997 = 0.000000e+00 + _104996;
        double _105002;
        _105002 = 0.000000e+00 + _105001;
        double _105007;
        _105007 = 0.000000e+00 + _105006;
        double _104999;
        _104999 = _104997 - -2.000000e+00;
        double _105003;
        _105003 = _105002 - 0.000000e+00;
        double _105009;
        _105009 = _105007 - -3.500000e+00;
        double _105000;
        _105000 = _104999 * _104999;
        double _105004;
        _105004 = _105003 * _105003;
        double _105010;
        _105010 = _105009 * _105009;
        double _105005;
        _105005 = _105000 + _105004;
        double _105011;
        _105011 = _105005 + _105010;
        length_105014 = sqrt(_105011);
        plength_105014 = length_105014;
    l105012: ;
        length_105014 = plength_105014;
        _105017 = fabs(length_105014);
        p_105017 = _105017;
    l105015: ;
        _105017 = p_105017;
        bool _105018;
        _105018 = 1.000000e-17 < _105017;
        if (_105018) goto l105019; else goto l107551;
    l107551: ;
        struct_vec_9645 n_107552;
        n_107552.e0 = _104999;
        n_107552.e1 = _105003;
        n_107552.e2 = _105009;
        pvnormalize_105022 = n_107552;
        goto l105020;
    l105019: ;
        double _107548;
        _107548 = _105003 / length_105014;
        double _107547;
        _107547 = _104999 / length_105014;
        double _107549;
        _107549 = _105009 / length_105014;
        struct_vec_9645 _107550;
        _107550.e0 = _107547;
        _107550.e1 = _107548;
        _107550.e2 = _107549;
        pvnormalize_105022 = _107550;
        goto l105020;
    l105020: ;
        vnormalize_105022 = pvnormalize_105022;
        struct_vec_9645 p_107545;
        p_107545.e0 = _104997;
        p_107545.e1 = _105002;
        p_107545.e2 = _105007;
        struct_Isect_9647 isect_107546;
        isect_107546.e0 = t_104990;
        isect_107546.e1 = p_107545;
        isect_107546.e2 = vnormalize_105022;
        isect_107546.e3 = 1;
        pray_sphere_intersect_105025 = isect_107546;
        goto l105023;
    l105023: ;
        ray_sphere_intersect_105025 = pray_sphere_intersect_105025;
        double _105030;
        _105030 = 3.000000e+00 * _104978;
        double _105027;
        _105027 = 5.000000e-01 * _104970;
        double _105028;
        _105028 = _105027 + _104974;
        double _105031;
        _105031 = _105028 + _105030;
        double _105032;
        _105032 = _105031 * _105031;
        double D_105034;
        D_105034 = _105032 - 9.000000e+00;
        bool _105035;
        _105035 = 0.000000e+00 < D_105034;
        if (_105035) goto l105036; else goto l107544;
    l107544: ;
        goto l107541;
    l105036: ;
        _105039 = sqrt(D_105034);
        p_105039 = _105039;
    l105037: ;
        _105039 = p_105039;
        double _105040;
        _105040 = -0.000000e+00 - _105031;
        double t_105041;
        t_105041 = _105040 - _105039;
        bool _105042;
        _105042 = 0.000000e+00 < t_105041;
        if (_105042) goto l105043; else goto l107543;
    l107543: ;
        goto l107540;
    l105043: ;
        double _105044;
        _105044 = ray_sphere_intersect_105025.e0;
        bool _105045;
        _105045 = t_105041 < _105044;
        if (_105045) goto l105046; else goto l107539;
    l107539: ;
        goto l107540;
    l107540: ;
        goto l107541;
    l107541: ;
        pray_sphere_intersect_105076 = ray_sphere_intersect_105025;
        goto l105074;
    l105046: ;
        double _105047;
        _105047 = _104970 * t_105041;
        double _105052;
        _105052 = _104973 * t_105041;
        double _105057;
        _105057 = _104978 * t_105041;
        double _105053;
        _105053 = 0.000000e+00 + _105052;
        double _105054;
        _105054 = _105053 - 0.000000e+00;
        double _105048;
        _105048 = 0.000000e+00 + _105047;
        double _105058;
        _105058 = 0.000000e+00 + _105057;
        double _105055;
        _105055 = _105054 * _105054;
        double _105050;
        _105050 = _105048 - -5.000000e-01;
        double _105060;
        _105060 = _105058 - -3.000000e+00;
        double _105051;
        _105051 = _105050 * _105050;
        double _105061;
        _105061 = _105060 * _105060;
        double _105056;
        _105056 = _105051 + _105055;
        double _105062;
        _105062 = _105056 + _105061;
        length_105065 = sqrt(_105062);
        plength_105065 = length_105065;
    l105063: ;
        length_105065 = plength_105065;
        _105068 = fabs(length_105065);
        p_105068 = _105068;
    l105066: ;
        _105068 = p_105068;
        bool _105069;
        _105069 = 1.000000e-17 < _105068;
        if (_105069) goto l105070; else goto l107537;
    l107537: ;
        struct_vec_9645 n_107538;
        n_107538.e0 = _105050;
        n_107538.e1 = _105054;
        n_107538.e2 = _105060;
        pvnormalize_105073 = n_107538;
        goto l105071;
    l105070: ;
        double _107533;
        _107533 = _105050 / length_105065;
        double _107534;
        _107534 = _105054 / length_105065;
        double _107535;
        _107535 = _105060 / length_105065;
        struct_vec_9645 _107536;
        _107536.e0 = _107533;
        _107536.e1 = _107534;
        _107536.e2 = _107535;
        pvnormalize_105073 = _107536;
        goto l105071;
    l105071: ;
        vnormalize_105073 = pvnormalize_105073;
        struct_vec_9645 p_107531;
        p_107531.e0 = _105048;
        p_107531.e1 = _105053;
        p_107531.e2 = _105058;
        struct_Isect_9647 isect_107532;
        isect_107532.e0 = t_105041;
        isect_107532.e1 = p_107531;
        isect_107532.e2 = vnormalize_105073;
        isect_107532.e3 = 1;
        pray_sphere_intersect_105076 = isect_107532;
        goto l105074;
    l105074: ;
        ray_sphere_intersect_105076 = pray_sphere_intersect_105076;
        double _105081;
        _105081 = 2.200000e+00 * _104978;
        double _105078;
        _105078 = -1.000000e+00 * _104970;
        double _105079;
        _105079 = _105078 + _104974;
        double _105082;
        _105082 = _105079 + _105081;
        double _105083;
        _105083 = _105082 * _105082;
        double D_105085;
        D_105085 = _105083 - 5.590000e+00;
        bool _105086;
        _105086 = 0.000000e+00 < D_105085;
        if (_105086) goto l105087; else goto l107530;
    l107530: ;
        goto l107527;
    l105087: ;
        _105090 = sqrt(D_105085);
        p_105090 = _105090;
    l105088: ;
        _105090 = p_105090;
        double _105091;
        _105091 = -0.000000e+00 - _105082;
        double t_105092;
        t_105092 = _105091 - _105090;
        bool _105093;
        _105093 = 0.000000e+00 < t_105092;
        if (_105093) goto l105094; else goto l107529;
    l107529: ;
        goto l107526;
    l105094: ;
        double _105095;
        _105095 = ray_sphere_intersect_105076.e0;
        bool _105096;
        _105096 = t_105092 < _105095;
        if (_105096) goto l105097; else goto l107525;
    l107525: ;
        goto l107526;
    l107526: ;
        goto l107527;
    l107527: ;
        pray_sphere_intersect_105126 = ray_sphere_intersect_105076;
        goto l105124;
    l105097: ;
        double _105107;
        _105107 = _104978 * t_105092;
        double _105098;
        _105098 = _104970 * t_105092;
        double _105108;
        _105108 = 0.000000e+00 + _105107;
        double _105102;
        _105102 = _104973 * t_105092;
        double _105099;
        _105099 = 0.000000e+00 + _105098;
        double _105110;
        _105110 = _105108 - -2.200000e+00;
        double _105103;
        _105103 = 0.000000e+00 + _105102;
        double _105100;
        _105100 = _105099 - 1.000000e+00;
        double _105111;
        _105111 = _105110 * _105110;
        double _105104;
        _105104 = _105103 - 0.000000e+00;
        double _105101;
        _105101 = _105100 * _105100;
        double _105105;
        _105105 = _105104 * _105104;
        double _105106;
        _105106 = _105101 + _105105;
        double _105112;
        _105112 = _105106 + _105111;
        length_105115 = sqrt(_105112);
        plength_105115 = length_105115;
    l105113: ;
        length_105115 = plength_105115;
        _105118 = fabs(length_105115);
        p_105118 = _105118;
    l105116: ;
        _105118 = p_105118;
        bool _105119;
        _105119 = 1.000000e-17 < _105118;
        if (_105119) goto l105120; else goto l107523;
    l107523: ;
        struct_vec_9645 n_107524;
        n_107524.e0 = _105100;
        n_107524.e1 = _105104;
        n_107524.e2 = _105110;
        pvnormalize_105123 = n_107524;
        goto l105121;
    l105120: ;
        double _107520;
        _107520 = _105104 / length_105115;
        double _107521;
        _107521 = _105110 / length_105115;
        double _107519;
        _107519 = _105100 / length_105115;
        struct_vec_9645 _107522;
        _107522.e0 = _107519;
        _107522.e1 = _107520;
        _107522.e2 = _107521;
        pvnormalize_105123 = _107522;
        goto l105121;
    l105121: ;
        vnormalize_105123 = pvnormalize_105123;
        struct_vec_9645 p_107517;
        p_107517.e0 = _105099;
        p_107517.e1 = _105103;
        p_107517.e2 = _105108;
        struct_Isect_9647 isect_107518;
        isect_107518.e0 = t_105092;
        isect_107518.e1 = p_107517;
        isect_107518.e2 = vnormalize_105123;
        isect_107518.e3 = 1;
        pray_sphere_intersect_105126 = isect_107518;
        goto l105124;
    l105124: ;
        ray_sphere_intersect_105126 = pray_sphere_intersect_105126;
        double _105128;
        _105128 = 1.000000e+00 * _104973;
        double _105127;
        _105127 = 0.000000e+00 * _104970;
        double _105130;
        _105130 = 0.000000e+00 * _104978;
        double _105129;
        _105129 = _105127 + _105128;
        double _105131;
        _105131 = _105129 + _105130;
        _105134 = fabs(_105131);
        p_105134 = _105134;
    l105132: ;
        _105134 = p_105134;
        bool _105135;
        _105135 = 1.000000e-17 <= _105134;
        if (_105135) goto l105136; else goto l107516;
    l107516: ;
        goto l107513;
    l105136: ;
        double t_105137;
        t_105137 = -5.000000e-01 / _105131;
        bool _105138;
        _105138 = 0.000000e+00 < t_105137;
        if (_105138) goto l105139; else goto l107515;
    l107515: ;
        goto l107512;
    l105139: ;
        double _105140;
        _105140 = ray_sphere_intersect_105126.e0;
        bool _105141;
        _105141 = t_105137 < _105140;
        if (_105141) goto l105142; else goto l107511;
    l107511: ;
        goto l107512;
    l107512: ;
        goto l107513;
    l107513: ;
        pray_plane_intersect_105145 = ray_sphere_intersect_105126;
        goto l105143;
    l105142: ;
        double _107505;
        _107505 = _104973 * t_105137;
        double _107506;
        _107506 = 0.000000e+00 + _107505;
        double _107507;
        _107507 = _104978 * t_105137;
        double _107503;
        _107503 = _104970 * t_105137;
        double _107508;
        _107508 = 0.000000e+00 + _107507;
        double _107504;
        _107504 = 0.000000e+00 + _107503;
        struct_vec_9645 p_107509;
        p_107509.e0 = _107504;
        p_107509.e1 = _107506;
        p_107509.e2 = _107508;
        struct_vec_9645 _106999_162;
        _106999_162.e0 = 0.000000e+00;
        _106999_162.e1 = 1.000000e+00;
        _106999_162.e2 = 0.000000e+00;
        struct_Isect_9647 isect_107510;
        isect_107510.e0 = t_105137;
        isect_107510.e1 = p_107509;
        isect_107510.e2 = _106999_162;
        isect_107510.e3 = 1;
        pray_plane_intersect_105145 = isect_107510;
        goto l105143;
    l105143: ;
        ray_plane_intersect_105145 = pray_plane_intersect_105145;
        int _105147;
        _105147 = ray_plane_intersect_105145.e3;
        bool _105149;
        _105149 = _105147 == 1;
        if (_105149) goto l105150; else goto l107502;
    l107502: ;
        pr_107461 = r_104918;
        pg_107462 = g_104919;
        pb_107463 = b_104920;
        pstate_107464 = state_104921;
        goto l107459;
    l105150: ;
        struct_vec_9645 _105151;
        _105151 = ray_plane_intersect_105145.e2;
        double _105152;
        _105152 = _105151.e0;
        double _105165;
        _105165 = _105151.e1;
        double _105163;
        _105163 = _105151.e2;
        bool _105154;
        _105154 = _105152 < 6.000000e-01;
        if (_105154) goto l105155; else goto l107501;
    l107501: ;
        goto l107486;
    l105155: ;
        bool _105157;
        _105157 = -6.000000e-01 < _105152;
        if (_105157) goto l105158; else goto l107485;
    l107485: ;
        goto l107486;
    l107486: ;
        bool _107487;
        _107487 = _105165 < 6.000000e-01;
        if (_107487) goto l107488; else goto l107500;
    l107500: ;
        goto l107492;
    l107488: ;
        bool _107489;
        _107489 = -6.000000e-01 < _105165;
        if (_107489) goto l107490; else goto l107491;
    l107491: ;
        goto l107492;
    l107492: ;
        bool _107493;
        _107493 = _105163 < 6.000000e-01;
        if (_107493) goto l107494; else goto l107499;
    l107499: ;
        goto l107498;
    l107494: ;
        bool _107495;
        _107495 = -6.000000e-01 < _105163;
        if (_107495) goto l107496; else goto l107497;
    l107497: ;
        goto l107498;
    l107498: ;
        p_105160 = 1.000000e+00;
        p_105161 = 0.000000e+00;
        p_105162 = 0.000000e+00;
        goto l105159;
    l107496: ;
        p_105160 = 0.000000e+00;
        p_105161 = 0.000000e+00;
        p_105162 = 1.000000e+00;
        goto l105159;
    l107490: ;
        p_105160 = 0.000000e+00;
        p_105161 = 1.000000e+00;
        p_105162 = 0.000000e+00;
        goto l105159;
    l105158: ;
        p_105160 = 1.000000e+00;
        p_105161 = 0.000000e+00;
        p_105162 = 0.000000e+00;
        goto l105159;
    l105159: ;
        _105160 = p_105160;
        _105161 = p_105161;
        _105162 = p_105162;
        double _105169;
        _105169 = _105162 * _105152;
        double _105164;
        _105164 = _105161 * _105163;
        double _105174;
        _105174 = _105160 * _105165;
        double _105170;
        _105170 = _105160 * _105163;
        double _105166;
        _105166 = _105162 * _105165;
        double _105175;
        _105175 = _105161 * _105152;
        double _105171;
        _105171 = _105169 - _105170;
        double _105167;
        _105167 = _105164 - _105166;
        double _105176;
        _105176 = _105174 - _105175;
        double _105172;
        _105172 = _105171 * _105171;
        double _105168;
        _105168 = _105167 * _105167;
        double _105177;
        _105177 = _105176 * _105176;
        double _105173;
        _105173 = _105168 + _105172;
        double _105178;
        _105178 = _105173 + _105177;
        length_105181 = sqrt(_105178);
        plength_105181 = length_105181;
    l105179: ;
        length_105181 = plength_105181;
        _105184 = fabs(length_105181);
        p_105184 = _105184;
    l105182: ;
        _105184 = p_105184;
        bool _105185;
        _105185 = 1.000000e-17 < _105184;
        if (_105185) goto l105186; else goto l107483;
    l107483: ;
        struct_vec_9645 _107484;
        _107484.e0 = _105167;
        _107484.e1 = _105171;
        _107484.e2 = _105176;
        pvnormalize_105189 = _107484;
        goto l105187;
    l105186: ;
        double _107481;
        _107481 = _105176 / length_105181;
        double _107479;
        _107479 = _105167 / length_105181;
        double _107480;
        _107480 = _105171 / length_105181;
        struct_vec_9645 _107482;
        _107482.e0 = _107479;
        _107482.e1 = _107480;
        _107482.e2 = _107481;
        pvnormalize_105189 = _107482;
        goto l105187;
    l105187: ;
        vnormalize_105189 = pvnormalize_105189;
        double _105190;
        _105190 = vnormalize_105189.e2;
        double _105196;
        _105196 = vnormalize_105189.e0;
        double _105192;
        _105192 = vnormalize_105189.e1;
        double _105191;
        _105191 = _105165 * _105190;
        double _105198;
        _105198 = _105152 * _105190;
        double _105203;
        _105203 = _105165 * _105196;
        double _105197;
        _105197 = _105163 * _105196;
        double _105202;
        _105202 = _105152 * _105192;
        double _105193;
        _105193 = _105163 * _105192;
        double _105194;
        _105194 = _105191 - _105193;
        double _105199;
        _105199 = _105197 - _105198;
        double _105204;
        _105204 = _105202 - _105203;
        double _105195;
        _105195 = _105194 * _105194;
        double _105200;
        _105200 = _105199 * _105199;
        double _105205;
        _105205 = _105204 * _105204;
        double _105201;
        _105201 = _105195 + _105200;
        double _105206;
        _105206 = _105201 + _105205;
        length_105209 = sqrt(_105206);
        plength_105209 = length_105209;
    l105207: ;
        length_105209 = plength_105209;
        _105212 = fabs(length_105209);
        p_105212 = _105212;
    l105210: ;
        _105212 = p_105212;
        bool _105213;
        _105213 = 1.000000e-17 < _105212;
        if (_105213) goto l105214; else goto l107477;
    l107477: ;
        struct_vec_9645 _107478;
        _107478.e0 = _105194;
        _107478.e1 = _105199;
        _107478.e2 = _105204;
        pvnormalize_105217 = _107478;
        goto l105215;
    l105214: ;
        double _107475;
        _107475 = _105204 / length_105209;
        double _107473;
        _107473 = _105194 / length_105209;
        double _107474;
        _107474 = _105199 / length_105209;
        struct_vec_9645 _107476;
        _107476.e0 = _107473;
        _107476.e1 = _107474;
        _107476.e2 = _107475;
        pvnormalize_105217 = _107476;
        goto l105215;
    l105215: ;
        vnormalize_105217 = pvnormalize_105217;
        double _105299;
        _105299 = 1.000000e-04 * _105163;
        struct_vec_9645 _105271;
        _105271 = ray_plane_intersect_105145.e1;
        double _105298;
        _105298 = _105271.e2;
        double _105274;
        _105274 = 1.000000e-04 * _105152;
        double _105300;
        _105300 = _105298 + _105299;
        double _105303;
        _105303 = vnormalize_105217.e2;
        double _105291;
        _105291 = vnormalize_105217.e1;
        double _105272;
        _105272 = _105271.e0;
        double _105286;
        _105286 = _105271.e1;
        double _105414;
        _105414 = _105300 - -2.200000e+00;
        double _105361;
        _105361 = _105300 - -3.000000e+00;
        double _105280;
        _105280 = vnormalize_105217.e0;
        double _105287;
        _105287 = 1.000000e-04 * _105165;
        double _105275;
        _105275 = _105272 + _105274;
        double _105477;
        _105477 = 0.000000e+00 * _105300;
        double _105301;
        _105301 = _105300 - -3.500000e+00;
        double _105288;
        _105288 = _105286 + _105287;
        double _105420;
        _105420 = _105414 * _105414;
        double _105367;
        _105367 = _105361 * _105361;
        double _105358;
        _105358 = _105275 - -5.000000e-01;
        double _105276;
        _105276 = _105275 - -2.000000e+00;
        double _105474;
        _105474 = 0.000000e+00 * _105275;
        double _105411;
        _105411 = _105275 - 1.000000e+00;
        double _105314;
        _105314 = _105301 * _105301;
        double _105475;
        _105475 = 1.000000e+00 * _105288;
        double _105289;
        _105289 = _105288 - 0.000000e+00;
        double _105365;
        _105365 = _105358 * _105358;
        double _105311;
        _105311 = _105276 * _105276;
        double _105476;
        _105476 = _105474 + _105475;
        double _105418;
        _105418 = _105411 * _105411;
        double _105312;
        _105312 = _105289 * _105289;
        double _105366;
        _105366 = _105365 + _105312;
        double _105313;
        _105313 = _105311 + _105312;
        double _105478;
        _105478 = _105476 + _105477;
        double _105419;
        _105419 = _105418 + _105312;
        double _105368;
        _105368 = _105366 + _105367;
        double _105315;
        _105315 = _105313 + _105314;
        double _105479;
        _105479 = 5.000000e-01 + _105478;
        double _105421;
        _105421 = _105419 + _105420;
        double C_105369;
        C_105369 = _105368 - 2.500000e-01;
        double C_105317;
        C_105317 = _105315 - 2.500000e-01;
        double _105480;
        _105480 = -0.000000e+00 - _105479;
        double C_105422;
        C_105422 = _105421 - 2.500000e-01;
        plower_105220 = 0;
        pupper_105221 = 8;
        pstep_105222 = 1;
        pocclusion_105223 = 0.000000e+00;
        pstate_105224 = state_104921;
        goto l105218;
    l105218: ;
        lower_105220 = plower_105220;
        upper_105221 = pupper_105221;
        step_105222 = pstep_105222;
        occlusion_105223 = pocclusion_105223;
        state_105224 = pstate_105224;
        bool _105225;
        _105225 = lower_105220 < upper_105221;
        if (_105225) goto l105226; else goto l107458;
    l107458: ;
        double _107467;
        _107467 = 6.400000e+01 - occlusion_105223;
        double _107468;
        _107468 = _107467 / 6.400000e+01;
        double _107469;
        _107469 = r_104918 + _107468;
        double _107471;
        _107471 = b_104920 + _107468;
        double _107470;
        _107470 = g_104919 + _107468;
        pr_107461 = _107469;
        pg_107462 = _107470;
        pb_107463 = _107471;
        pstate_107464 = state_105224;
        goto l107459;
    l107459: ;
        r_107461 = pr_107461;
        g_107462 = pg_107462;
        b_107463 = pb_107463;
        state_107464 = pstate_107464;
        int _107465;
        _107465 = lower_104915 + step_104917;
        plower_104915 = _107465;
        pupper_104916 = upper_104916;
        pstep_104917 = step_104917;
        pr_104918 = r_107461;
        pg_104919 = g_107462;
        pb_104920 = b_107463;
        pstate_104921 = state_107464;
        goto l104913;
    l105226: ;
        unsigned long hi_105232;
        hi_105232 = state_105224 >> 32;
        unsigned long lo_105229;
        lo_105229 = 4294967295 & state_105224;
        unsigned int _105230;
        _105230 = (unsigned int)lo_105229;
        unsigned int _105233;
        _105233 = (unsigned int)hi_105232;
        unsigned int _105234;
        _105234 = _105230 ^ _105233;
        double _105235;
        _105235 = (double)_105234;
        double _105236;
        _105236 = 2.328306e-10 * _105235;
        theta_105239 = sqrt(_105236);
        ptheta_105239 = theta_105239;
    l105237: ;
        theta_105239 = ptheta_105239;
        unsigned long _105246;
        _105246 = 4294883355 * lo_105229;
        unsigned long _105247;
        _105247 = _105246 + hi_105232;
        unsigned long lo_105248;
        lo_105248 = 4294967295 & _105247;
        unsigned long hi_105250;
        hi_105250 = _105247 >> 32;
        unsigned int _105249;
        _105249 = (unsigned int)lo_105248;
        unsigned int _105251;
        _105251 = (unsigned int)hi_105250;
        unsigned int _105252;
        _105252 = _105249 ^ _105251;
        double _105253;
        _105253 = (double)_105252;
        double _105254;
        _105254 = 2.328306e-10 * _105253;
        double phi_105255;
        phi_105255 = 6.283185e+00 * _105254;
        _105258 = cos(phi_105255);
        p_105258 = _105258;
    l105256: ;
        _105258 = p_105258;
        _105265 = sin(phi_105255);
        p_105265 = _105265;
    l105263: ;
        _105265 = p_105265;
        double _105266;
        _105266 = theta_105239 * theta_105239;
        double _105267;
        _105267 = 1.000000e+00 - _105266;
        z_105270 = sqrt(_105267);
        pz_105270 = z_105270;
    l105268: ;
        z_105270 = pz_105270;
        double _105294;
        _105294 = z_105270 * _105165;
        double _105283;
        _105283 = z_105270 * _105152;
        double y_105279;
        y_105279 = _105265 * theta_105239;
        double _105292;
        _105292 = y_105279 * _105291;
        double _105281;
        _105281 = y_105279 * _105280;
        double x_105277;
        x_105277 = _105258 * theta_105239;
        double _105306;
        _105306 = z_105270 * _105163;
        double _105304;
        _105304 = y_105279 * _105303;
        double _105278;
        _105278 = x_105277 * _105196;
        double _105290;
        _105290 = x_105277 * _105192;
        double _105293;
        _105293 = _105290 + _105292;
        double _105282;
        _105282 = _105278 + _105281;
        double _105302;
        _105302 = x_105277 * _105190;
        double _105305;
        _105305 = _105302 + _105304;
        double ry_105295;
        ry_105295 = _105293 + _105294;
        double rx_105284;
        rx_105284 = _105282 + _105283;
        double rz_105307;
        rz_105307 = _105305 + _105306;
        double _105296;
        _105296 = _105289 * ry_105295;
        double _105285;
        _105285 = _105276 * rx_105284;
        double _105308;
        _105308 = _105301 * rz_105307;
        double _105297;
        _105297 = _105285 + _105296;
        double _105309;
        _105309 = _105297 + _105308;
        double _105310;
        _105310 = _105309 * _105309;
        double D_105318;
        D_105318 = _105310 - C_105317;
        bool _105319;
        _105319 = 0.000000e+00 < D_105318;
        if (_105319) goto l105320; else goto l107457;
    l107457: ;
        goto l107454;
    l105320: ;
        _105323 = sqrt(D_105318);
        p_105323 = _105323;
    l105321: ;
        _105323 = p_105323;
        double _105324;
        _105324 = -0.000000e+00 - _105309;
        double t_105325;
        t_105325 = _105324 - _105323;
        bool _105326;
        _105326 = 0.000000e+00 < t_105325;
        if (_105326) goto l105327; else goto l107456;
    l107456: ;
        goto l107453;
    l105327: ;
        bool _105328;
        _105328 = t_105325 < 1.000000e+17;
        if (_105328) goto l105329; else goto l107452;
    l107452: ;
        goto l107453;
    l107453: ;
        goto l107454;
    l107454: ;
        struct_Isect_9647 _107049_259;
        _107049_259.e0 = 1.000000e+17;
        // bottom: _107049_259.e1 = // bottom: struct_vec_9645 _107047_263;;
        // bottom: _107049_259.e2 = _107047_263;
        _107049_259.e3 = 0;
        pray_sphere_intersect_105357 = _107049_259;
        goto l105355;
    l105329: ;
        double _105334;
        _105334 = ry_105295 * t_105325;
        double _105339;
        _105339 = rz_105307 * t_105325;
        double _105330;
        _105330 = rx_105284 * t_105325;
        double _105335;
        _105335 = _105288 + _105334;
        double _105340;
        _105340 = _105300 + _105339;
        double _105331;
        _105331 = _105275 + _105330;
        double _105336;
        _105336 = _105335 - 0.000000e+00;
        double _105341;
        _105341 = _105340 - -3.500000e+00;
        double _105332;
        _105332 = _105331 - -2.000000e+00;
        double _105337;
        _105337 = _105336 * _105336;
        double _105342;
        _105342 = _105341 * _105341;
        double _105333;
        _105333 = _105332 * _105332;
        double _105338;
        _105338 = _105333 + _105337;
        double _105343;
        _105343 = _105338 + _105342;
        length_105346 = sqrt(_105343);
        plength_105346 = length_105346;
    l105344: ;
        length_105346 = plength_105346;
        _105349 = fabs(length_105346);
        p_105349 = _105349;
    l105347: ;
        _105349 = p_105349;
        bool _105350;
        _105350 = 1.000000e-17 < _105349;
        if (_105350) goto l105351; else goto l107450;
    l107450: ;
        struct_vec_9645 n_107451;
        n_107451.e0 = _105332;
        n_107451.e1 = _105336;
        n_107451.e2 = _105341;
        pvnormalize_105354 = n_107451;
        goto l105352;
    l105351: ;
        double _107448;
        _107448 = _105341 / length_105346;
        double _107447;
        _107447 = _105336 / length_105346;
        double _107446;
        _107446 = _105332 / length_105346;
        struct_vec_9645 _107449;
        _107449.e0 = _107446;
        _107449.e1 = _107447;
        _107449.e2 = _107448;
        pvnormalize_105354 = _107449;
        goto l105352;
    l105352: ;
        vnormalize_105354 = pvnormalize_105354;
        struct_vec_9645 p_107444;
        p_107444.e0 = _105331;
        p_107444.e1 = _105335;
        p_107444.e2 = _105340;
        struct_Isect_9647 isect_107445;
        isect_107445.e0 = t_105325;
        isect_107445.e1 = p_107444;
        isect_107445.e2 = vnormalize_105354;
        isect_107445.e3 = 1;
        pray_sphere_intersect_105357 = isect_107445;
        goto l105355;
    l105355: ;
        ray_sphere_intersect_105357 = pray_sphere_intersect_105357;
        double _105359;
        _105359 = _105358 * rx_105284;
        double _105360;
        _105360 = _105359 + _105296;
        double _105362;
        _105362 = _105361 * rz_105307;
        double _105363;
        _105363 = _105360 + _105362;
        double _105364;
        _105364 = _105363 * _105363;
        double D_105370;
        D_105370 = _105364 - C_105369;
        bool _105371;
        _105371 = 0.000000e+00 < D_105370;
        if (_105371) goto l105372; else goto l107443;
    l107443: ;
        goto l107440;
    l105372: ;
        _105375 = sqrt(D_105370);
        p_105375 = _105375;
    l105373: ;
        _105375 = p_105375;
        double _105376;
        _105376 = -0.000000e+00 - _105363;
        double t_105377;
        t_105377 = _105376 - _105375;
        bool _105378;
        _105378 = 0.000000e+00 < t_105377;
        if (_105378) goto l105379; else goto l107442;
    l107442: ;
        goto l107439;
    l105379: ;
        double _105380;
        _105380 = ray_sphere_intersect_105357.e0;
        bool _105381;
        _105381 = t_105377 < _105380;
        if (_105381) goto l105382; else goto l107438;
    l107438: ;
        goto l107439;
    l107439: ;
        goto l107440;
    l107440: ;
        pray_sphere_intersect_105410 = ray_sphere_intersect_105357;
        goto l105408;
    l105382: ;
        double _105383;
        _105383 = rx_105284 * t_105377;
        double _105387;
        _105387 = ry_105295 * t_105377;
        double _105384;
        _105384 = _105275 + _105383;
        double _105392;
        _105392 = rz_105307 * t_105377;
        double _105388;
        _105388 = _105288 + _105387;
        double _105385;
        _105385 = _105384 - -5.000000e-01;
        double _105393;
        _105393 = _105300 + _105392;
        double _105389;
        _105389 = _105388 - 0.000000e+00;
        double _105386;
        _105386 = _105385 * _105385;
        double _105394;
        _105394 = _105393 - -3.000000e+00;
        double _105390;
        _105390 = _105389 * _105389;
        double _105391;
        _105391 = _105386 + _105390;
        double _105395;
        _105395 = _105394 * _105394;
        double _105396;
        _105396 = _105391 + _105395;
        length_105399 = sqrt(_105396);
        plength_105399 = length_105399;
    l105397: ;
        length_105399 = plength_105399;
        _105402 = fabs(length_105399);
        p_105402 = _105402;
    l105400: ;
        _105402 = p_105402;
        bool _105403;
        _105403 = 1.000000e-17 < _105402;
        if (_105403) goto l105404; else goto l107436;
    l107436: ;
        struct_vec_9645 n_107437;
        n_107437.e0 = _105385;
        n_107437.e1 = _105389;
        n_107437.e2 = _105394;
        pvnormalize_105407 = n_107437;
        goto l105405;
    l105404: ;
        double _107434;
        _107434 = _105394 / length_105399;
        double _107433;
        _107433 = _105389 / length_105399;
        double _107432;
        _107432 = _105385 / length_105399;
        struct_vec_9645 _107435;
        _107435.e0 = _107432;
        _107435.e1 = _107433;
        _107435.e2 = _107434;
        pvnormalize_105407 = _107435;
        goto l105405;
    l105405: ;
        vnormalize_105407 = pvnormalize_105407;
        struct_vec_9645 p_107430;
        p_107430.e0 = _105384;
        p_107430.e1 = _105388;
        p_107430.e2 = _105393;
        struct_Isect_9647 isect_107431;
        isect_107431.e0 = t_105377;
        isect_107431.e1 = p_107430;
        isect_107431.e2 = vnormalize_105407;
        isect_107431.e3 = 1;
        pray_sphere_intersect_105410 = isect_107431;
        goto l105408;
    l105408: ;
        ray_sphere_intersect_105410 = pray_sphere_intersect_105410;
        double _105412;
        _105412 = _105411 * rx_105284;
        double _105415;
        _105415 = _105414 * rz_105307;
        double _105413;
        _105413 = _105412 + _105296;
        double _105416;
        _105416 = _105413 + _105415;
        double _105417;
        _105417 = _105416 * _105416;
        double D_105423;
        D_105423 = _105417 - C_105422;
        bool _105424;
        _105424 = 0.000000e+00 < D_105423;
        if (_105424) goto l105425; else goto l107429;
    l107429: ;
        goto l107426;
    l105425: ;
        _105428 = sqrt(D_105423);
        p_105428 = _105428;
    l105426: ;
        _105428 = p_105428;
        double _105429;
        _105429 = -0.000000e+00 - _105416;
        double t_105430;
        t_105430 = _105429 - _105428;
        bool _105431;
        _105431 = 0.000000e+00 < t_105430;
        if (_105431) goto l105432; else goto l107428;
    l107428: ;
        goto l107425;
    l105432: ;
        double _105433;
        _105433 = ray_sphere_intersect_105410.e0;
        bool _105434;
        _105434 = t_105430 < _105433;
        if (_105434) goto l105435; else goto l107424;
    l107424: ;
        goto l107425;
    l107425: ;
        goto l107426;
    l107426: ;
        pray_sphere_intersect_105463 = ray_sphere_intersect_105410;
        goto l105461;
    l105435: ;
        double _105436;
        _105436 = rx_105284 * t_105430;
        double _105445;
        _105445 = rz_105307 * t_105430;
        double _105440;
        _105440 = ry_105295 * t_105430;
        double _105437;
        _105437 = _105275 + _105436;
        double _105438;
        _105438 = _105437 - 1.000000e+00;
        double _105446;
        _105446 = _105300 + _105445;
        double _105441;
        _105441 = _105288 + _105440;
        double _105439;
        _105439 = _105438 * _105438;
        double _105447;
        _105447 = _105446 - -2.200000e+00;
        double _105442;
        _105442 = _105441 - 0.000000e+00;
        double _105448;
        _105448 = _105447 * _105447;
        double _105443;
        _105443 = _105442 * _105442;
        double _105444;
        _105444 = _105439 + _105443;
        double _105449;
        _105449 = _105444 + _105448;
        length_105452 = sqrt(_105449);
        plength_105452 = length_105452;
    l105450: ;
        length_105452 = plength_105452;
        _105455 = fabs(length_105452);
        p_105455 = _105455;
    l105453: ;
        _105455 = p_105455;
        bool _105456;
        _105456 = 1.000000e-17 < _105455;
        if (_105456) goto l105457; else goto l107422;
    l107422: ;
        struct_vec_9645 n_107423;
        n_107423.e0 = _105438;
        n_107423.e1 = _105442;
        n_107423.e2 = _105447;
        pvnormalize_105460 = n_107423;
        goto l105458;
    l105457: ;
        double _107418;
        _107418 = _105438 / length_105452;
        double _107419;
        _107419 = _105442 / length_105452;
        double _107420;
        _107420 = _105447 / length_105452;
        struct_vec_9645 _107421;
        _107421.e0 = _107418;
        _107421.e1 = _107419;
        _107421.e2 = _107420;
        pvnormalize_105460 = _107421;
        goto l105458;
    l105458: ;
        vnormalize_105460 = pvnormalize_105460;
        struct_vec_9645 p_107416;
        p_107416.e0 = _105437;
        p_107416.e1 = _105441;
        p_107416.e2 = _105446;
        struct_Isect_9647 isect_107417;
        isect_107417.e0 = t_105430;
        isect_107417.e1 = p_107416;
        isect_107417.e2 = vnormalize_105460;
        isect_107417.e3 = 1;
        pray_sphere_intersect_105463 = isect_107417;
        goto l105461;
    l105461: ;
        ray_sphere_intersect_105463 = pray_sphere_intersect_105463;
        double _105464;
        _105464 = 0.000000e+00 * rx_105284;
        double _105465;
        _105465 = 1.000000e+00 * ry_105295;
        double _105467;
        _105467 = 0.000000e+00 * rz_105307;
        double _105466;
        _105466 = _105464 + _105465;
        double _105468;
        _105468 = _105466 + _105467;
        _105471 = fabs(_105468);
        p_105471 = _105471;
    l105469: ;
        _105471 = p_105471;
        bool _105472;
        _105472 = 1.000000e-17 <= _105471;
        if (_105472) goto l105473; else goto l107415;
    l107415: ;
        goto l107412;
    l105473: ;
        double t_105481;
        t_105481 = _105480 / _105468;
        bool _105482;
        _105482 = 0.000000e+00 < t_105481;
        if (_105482) goto l105483; else goto l107414;
    l107414: ;
        goto l107411;
    l105483: ;
        double _105484;
        _105484 = ray_sphere_intersect_105463.e0;
        bool _105485;
        _105485 = t_105481 < _105484;
        if (_105485) goto l105486; else goto l107410;
    l107410: ;
        goto l107411;
    l107411: ;
        goto l107412;
    l107412: ;
        pray_plane_intersect_105489 = ray_sphere_intersect_105463;
        goto l105487;
    l105486: ;
        double _107406;
        _107406 = rz_105307 * t_105481;
        double _107407;
        _107407 = _105300 + _107406;
        double _107402;
        _107402 = rx_105284 * t_105481;
        double _107403;
        _107403 = _105275 + _107402;
        double _107404;
        _107404 = ry_105295 * t_105481;
        double _107405;
        _107405 = _105288 + _107404;
        struct_vec_9645 p_107408;
        p_107408.e0 = _107403;
        p_107408.e1 = _107405;
        p_107408.e2 = _107407;
        struct_vec_9645 _106999_338;
        _106999_338.e0 = 0.000000e+00;
        _106999_338.e1 = 1.000000e+00;
        _106999_338.e2 = 0.000000e+00;
        struct_Isect_9647 isect_107409;
        isect_107409.e0 = t_105481;
        isect_107409.e1 = p_107408;
        isect_107409.e2 = _106999_338;
        isect_107409.e3 = 1;
        pray_plane_intersect_105489 = isect_107409;
        goto l105487;
    l105487: ;
        ray_plane_intersect_105489 = pray_plane_intersect_105489;
        int _105490;
        _105490 = ray_plane_intersect_105489.e3;
        bool _105491;
        _105491 = _105490 == 1;
        if (_105491) goto l105492; else goto l107401;
    l107401: ;
        pocclusion_105495 = occlusion_105223;
        goto l105493;
    l105492: ;
        double _107400;
        _107400 = 1.000000e+00 + occlusion_105223;
        pocclusion_105495 = _107400;
        goto l105493;
    l105493: ;
        occlusion_105495 = pocclusion_105495;
        unsigned long _105496;
        _105496 = 4294883355 * lo_105248;
        unsigned long _105497;
        _105497 = _105496 + hi_105250;
        unsigned long lo_105498;
        lo_105498 = 4294967295 & _105497;
        unsigned long hi_105500;
        hi_105500 = _105497 >> 32;
        unsigned int _105499;
        _105499 = (unsigned int)lo_105498;
        unsigned int _105501;
        _105501 = (unsigned int)hi_105500;
        unsigned int _105502;
        _105502 = _105499 ^ _105501;
        double _105503;
        _105503 = (double)_105502;
        double _105504;
        _105504 = 2.328306e-10 * _105503;
        theta_105507 = sqrt(_105504);
        ptheta_105507 = theta_105507;
    l105505: ;
        theta_105507 = ptheta_105507;
        unsigned long _105508;
        _105508 = 4294883355 * lo_105498;
        unsigned long _105509;
        _105509 = _105508 + hi_105500;
        unsigned long lo_105510;
        lo_105510 = 4294967295 & _105509;
        unsigned long hi_105512;
        hi_105512 = _105509 >> 32;
        unsigned int _105511;
        _105511 = (unsigned int)lo_105510;
        unsigned int _105513;
        _105513 = (unsigned int)hi_105512;
        unsigned int _105514;
        _105514 = _105511 ^ _105513;
        double _105515;
        _105515 = (double)_105514;
        double _105516;
        _105516 = 2.328306e-10 * _105515;
        double phi_105517;
        phi_105517 = 6.283185e+00 * _105516;
        _105520 = cos(phi_105517);
        p_105520 = _105520;
    l105518: ;
        _105520 = p_105520;
        _105523 = sin(phi_105517);
        p_105523 = _105523;
    l105521: ;
        _105523 = p_105523;
        double _105524;
        _105524 = theta_105507 * theta_105507;
        double _105525;
        _105525 = 1.000000e+00 - _105524;
        z_105528 = sqrt(_105525);
        pz_105528 = z_105528;
    l105526: ;
        z_105528 = pz_105528;
        double _105540;
        _105540 = z_105528 * _105165;
        double _105547;
        _105547 = z_105528 * _105163;
        double x_105529;
        x_105529 = _105520 * theta_105507;
        double y_105531;
        y_105531 = _105523 * theta_105507;
        double _105530;
        _105530 = x_105529 * _105196;
        double _105537;
        _105537 = x_105529 * _105192;
        double _105538;
        _105538 = y_105531 * _105291;
        double _105534;
        _105534 = z_105528 * _105152;
        double _105532;
        _105532 = y_105531 * _105280;
        double _105544;
        _105544 = x_105529 * _105190;
        double _105545;
        _105545 = y_105531 * _105303;
        double _105533;
        _105533 = _105530 + _105532;
        double _105539;
        _105539 = _105537 + _105538;
        double rx_105535;
        rx_105535 = _105533 + _105534;
        double _105546;
        _105546 = _105544 + _105545;
        double ry_105541;
        ry_105541 = _105539 + _105540;
        double _105536;
        _105536 = _105276 * rx_105535;
        double rz_105548;
        rz_105548 = _105546 + _105547;
        double _105542;
        _105542 = _105289 * ry_105541;
        double _105543;
        _105543 = _105536 + _105542;
        double _105549;
        _105549 = _105301 * rz_105548;
        double _105550;
        _105550 = _105543 + _105549;
        double _105551;
        _105551 = _105550 * _105550;
        double D_105552;
        D_105552 = _105551 - C_105317;
        bool _105553;
        _105553 = 0.000000e+00 < D_105552;
        if (_105553) goto l105554; else goto l107399;
    l107399: ;
        goto l107396;
    l105554: ;
        _105557 = sqrt(D_105552);
        p_105557 = _105557;
    l105555: ;
        _105557 = p_105557;
        double _105558;
        _105558 = -0.000000e+00 - _105550;
        double t_105559;
        t_105559 = _105558 - _105557;
        bool _105560;
        _105560 = 0.000000e+00 < t_105559;
        if (_105560) goto l105561; else goto l107398;
    l107398: ;
        goto l107395;
    l105561: ;
        bool _105562;
        _105562 = t_105559 < 1.000000e+17;
        if (_105562) goto l105563; else goto l107394;
    l107394: ;
        goto l107395;
    l107395: ;
        goto l107396;
    l107396: ;
        struct_Isect_9647 _107049_367;
        _107049_367.e0 = 1.000000e+17;
        // bottom: _107049_367.e1 = // bottom: struct_vec_9645 _107047_371;;
        // bottom: _107049_367.e2 = _107047_371;
        _107049_367.e3 = 0;
        pray_sphere_intersect_105591 = _107049_367;
        goto l105589;
    l105563: ;
        double _105573;
        _105573 = rz_105548 * t_105559;
        double _105564;
        _105564 = rx_105535 * t_105559;
        double _105568;
        _105568 = ry_105541 * t_105559;
        double _105569;
        _105569 = _105288 + _105568;
        double _105574;
        _105574 = _105300 + _105573;
        double _105565;
        _105565 = _105275 + _105564;
        double _105570;
        _105570 = _105569 - 0.000000e+00;
        double _105575;
        _105575 = _105574 - -3.500000e+00;
        double _105566;
        _105566 = _105565 - -2.000000e+00;
        double _105571;
        _105571 = _105570 * _105570;
        double _105576;
        _105576 = _105575 * _105575;
        double _105567;
        _105567 = _105566 * _105566;
        double _105572;
        _105572 = _105567 + _105571;
        double _105577;
        _105577 = _105572 + _105576;
        length_105580 = sqrt(_105577);
        plength_105580 = length_105580;
    l105578: ;
        length_105580 = plength_105580;
        _105583 = fabs(length_105580);
        p_105583 = _105583;
    l105581: ;
        _105583 = p_105583;
        bool _105584;
        _105584 = 1.000000e-17 < _105583;
        if (_105584) goto l105585; else goto l107392;
    l107392: ;
        struct_vec_9645 n_107393;
        n_107393.e0 = _105566;
        n_107393.e1 = _105570;
        n_107393.e2 = _105575;
        pvnormalize_105588 = n_107393;
        goto l105586;
    l105585: ;
        double _107389;
        _107389 = _105570 / length_105580;
        double _107388;
        _107388 = _105566 / length_105580;
        double _107390;
        _107390 = _105575 / length_105580;
        struct_vec_9645 _107391;
        _107391.e0 = _107388;
        _107391.e1 = _107389;
        _107391.e2 = _107390;
        pvnormalize_105588 = _107391;
        goto l105586;
    l105586: ;
        vnormalize_105588 = pvnormalize_105588;
        struct_vec_9645 p_107386;
        p_107386.e0 = _105565;
        p_107386.e1 = _105569;
        p_107386.e2 = _105574;
        struct_Isect_9647 isect_107387;
        isect_107387.e0 = t_105559;
        isect_107387.e1 = p_107386;
        isect_107387.e2 = vnormalize_105588;
        isect_107387.e3 = 1;
        pray_sphere_intersect_105591 = isect_107387;
        goto l105589;
    l105589: ;
        ray_sphere_intersect_105591 = pray_sphere_intersect_105591;
        double _105592;
        _105592 = _105358 * rx_105535;
        double _105594;
        _105594 = _105361 * rz_105548;
        double _105593;
        _105593 = _105592 + _105542;
        double _105595;
        _105595 = _105593 + _105594;
        double _105596;
        _105596 = _105595 * _105595;
        double D_105597;
        D_105597 = _105596 - C_105369;
        bool _105598;
        _105598 = 0.000000e+00 < D_105597;
        if (_105598) goto l105599; else goto l107385;
    l107385: ;
        goto l107382;
    l105599: ;
        _105602 = sqrt(D_105597);
        p_105602 = _105602;
    l105600: ;
        _105602 = p_105602;
        double _105603;
        _105603 = -0.000000e+00 - _105595;
        double t_105604;
        t_105604 = _105603 - _105602;
        bool _105605;
        _105605 = 0.000000e+00 < t_105604;
        if (_105605) goto l105606; else goto l107384;
    l107384: ;
        goto l107381;
    l105606: ;
        double _105607;
        _105607 = ray_sphere_intersect_105591.e0;
        bool _105608;
        _105608 = t_105604 < _105607;
        if (_105608) goto l105609; else goto l107380;
    l107380: ;
        goto l107381;
    l107381: ;
        goto l107382;
    l107382: ;
        pray_sphere_intersect_105637 = ray_sphere_intersect_105591;
        goto l105635;
    l105609: ;
        double _105614;
        _105614 = ry_105541 * t_105604;
        double _105619;
        _105619 = rz_105548 * t_105604;
        double _105615;
        _105615 = _105288 + _105614;
        double _105610;
        _105610 = rx_105535 * t_105604;
        double _105611;
        _105611 = _105275 + _105610;
        double _105620;
        _105620 = _105300 + _105619;
        double _105616;
        _105616 = _105615 - 0.000000e+00;
        double _105612;
        _105612 = _105611 - -5.000000e-01;
        double _105621;
        _105621 = _105620 - -3.000000e+00;
        double _105617;
        _105617 = _105616 * _105616;
        double _105613;
        _105613 = _105612 * _105612;
        double _105622;
        _105622 = _105621 * _105621;
        double _105618;
        _105618 = _105613 + _105617;
        double _105623;
        _105623 = _105618 + _105622;
        length_105626 = sqrt(_105623);
        plength_105626 = length_105626;
    l105624: ;
        length_105626 = plength_105626;
        _105629 = fabs(length_105626);
        p_105629 = _105629;
    l105627: ;
        _105629 = p_105629;
        bool _105630;
        _105630 = 1.000000e-17 < _105629;
        if (_105630) goto l105631; else goto l107378;
    l107378: ;
        struct_vec_9645 n_107379;
        n_107379.e0 = _105612;
        n_107379.e1 = _105616;
        n_107379.e2 = _105621;
        pvnormalize_105634 = n_107379;
        goto l105632;
    l105631: ;
        double _107375;
        _107375 = _105616 / length_105626;
        double _107374;
        _107374 = _105612 / length_105626;
        double _107376;
        _107376 = _105621 / length_105626;
        struct_vec_9645 _107377;
        _107377.e0 = _107374;
        _107377.e1 = _107375;
        _107377.e2 = _107376;
        pvnormalize_105634 = _107377;
        goto l105632;
    l105632: ;
        vnormalize_105634 = pvnormalize_105634;
        struct_vec_9645 p_107372;
        p_107372.e0 = _105611;
        p_107372.e1 = _105615;
        p_107372.e2 = _105620;
        struct_Isect_9647 isect_107373;
        isect_107373.e0 = t_105604;
        isect_107373.e1 = p_107372;
        isect_107373.e2 = vnormalize_105634;
        isect_107373.e3 = 1;
        pray_sphere_intersect_105637 = isect_107373;
        goto l105635;
    l105635: ;
        ray_sphere_intersect_105637 = pray_sphere_intersect_105637;
        double _105638;
        _105638 = _105411 * rx_105535;
        double _105640;
        _105640 = _105414 * rz_105548;
        double _105639;
        _105639 = _105638 + _105542;
        double _105641;
        _105641 = _105639 + _105640;
        double _105642;
        _105642 = _105641 * _105641;
        double D_105643;
        D_105643 = _105642 - C_105422;
        bool _105644;
        _105644 = 0.000000e+00 < D_105643;
        if (_105644) goto l105645; else goto l107371;
    l107371: ;
        goto l107368;
    l105645: ;
        _105648 = sqrt(D_105643);
        p_105648 = _105648;
    l105646: ;
        _105648 = p_105648;
        double _105649;
        _105649 = -0.000000e+00 - _105641;
        double t_105650;
        t_105650 = _105649 - _105648;
        bool _105651;
        _105651 = 0.000000e+00 < t_105650;
        if (_105651) goto l105652; else goto l107370;
    l107370: ;
        goto l107367;
    l105652: ;
        double _105653;
        _105653 = ray_sphere_intersect_105637.e0;
        bool _105654;
        _105654 = t_105650 < _105653;
        if (_105654) goto l105655; else goto l107366;
    l107366: ;
        goto l107367;
    l107367: ;
        goto l107368;
    l107368: ;
        pray_sphere_intersect_105683 = ray_sphere_intersect_105637;
        goto l105681;
    l105655: ;
        double _105660;
        _105660 = ry_105541 * t_105650;
        double _105661;
        _105661 = _105288 + _105660;
        double _105665;
        _105665 = rz_105548 * t_105650;
        double _105656;
        _105656 = rx_105535 * t_105650;
        double _105657;
        _105657 = _105275 + _105656;
        double _105662;
        _105662 = _105661 - 0.000000e+00;
        double _105666;
        _105666 = _105300 + _105665;
        double _105658;
        _105658 = _105657 - 1.000000e+00;
        double _105663;
        _105663 = _105662 * _105662;
        double _105667;
        _105667 = _105666 - -2.200000e+00;
        double _105659;
        _105659 = _105658 * _105658;
        double _105664;
        _105664 = _105659 + _105663;
        double _105668;
        _105668 = _105667 * _105667;
        double _105669;
        _105669 = _105664 + _105668;
        length_105672 = sqrt(_105669);
        plength_105672 = length_105672;
    l105670: ;
        length_105672 = plength_105672;
        _105675 = fabs(length_105672);
        p_105675 = _105675;
    l105673: ;
        _105675 = p_105675;
        bool _105676;
        _105676 = 1.000000e-17 < _105675;
        if (_105676) goto l105677; else goto l107364;
    l107364: ;
        struct_vec_9645 n_107365;
        n_107365.e0 = _105658;
        n_107365.e1 = _105662;
        n_107365.e2 = _105667;
        pvnormalize_105680 = n_107365;
        goto l105678;
    l105677: ;
        double _107360;
        _107360 = _105658 / length_105672;
        double _107362;
        _107362 = _105667 / length_105672;
        double _107361;
        _107361 = _105662 / length_105672;
        struct_vec_9645 _107363;
        _107363.e0 = _107360;
        _107363.e1 = _107361;
        _107363.e2 = _107362;
        pvnormalize_105680 = _107363;
        goto l105678;
    l105678: ;
        vnormalize_105680 = pvnormalize_105680;
        struct_vec_9645 p_107358;
        p_107358.e0 = _105657;
        p_107358.e1 = _105661;
        p_107358.e2 = _105666;
        struct_Isect_9647 isect_107359;
        isect_107359.e0 = t_105650;
        isect_107359.e1 = p_107358;
        isect_107359.e2 = vnormalize_105680;
        isect_107359.e3 = 1;
        pray_sphere_intersect_105683 = isect_107359;
        goto l105681;
    l105681: ;
        ray_sphere_intersect_105683 = pray_sphere_intersect_105683;
        double _105687;
        _105687 = 0.000000e+00 * rz_105548;
        double _105684;
        _105684 = 0.000000e+00 * rx_105535;
        double _105685;
        _105685 = 1.000000e+00 * ry_105541;
        double _105686;
        _105686 = _105684 + _105685;
        double _105688;
        _105688 = _105686 + _105687;
        _105691 = fabs(_105688);
        p_105691 = _105691;
    l105689: ;
        _105691 = p_105691;
        bool _105692;
        _105692 = 1.000000e-17 <= _105691;
        if (_105692) goto l105693; else goto l107357;
    l107357: ;
        goto l107354;
    l105693: ;
        double t_105694;
        t_105694 = _105480 / _105688;
        bool _105695;
        _105695 = 0.000000e+00 < t_105694;
        if (_105695) goto l105696; else goto l107356;
    l107356: ;
        goto l107353;
    l105696: ;
        double _105697;
        _105697 = ray_sphere_intersect_105683.e0;
        bool _105698;
        _105698 = t_105694 < _105697;
        if (_105698) goto l105699; else goto l107352;
    l107352: ;
        goto l107353;
    l107353: ;
        goto l107354;
    l107354: ;
        pray_plane_intersect_105702 = ray_sphere_intersect_105683;
        goto l105700;
    l105699: ;
        double _107348;
        _107348 = rz_105548 * t_105694;
        double _107349;
        _107349 = _105300 + _107348;
        double _107346;
        _107346 = ry_105541 * t_105694;
        double _107344;
        _107344 = rx_105535 * t_105694;
        double _107345;
        _107345 = _105275 + _107344;
        double _107347;
        _107347 = _105288 + _107346;
        struct_vec_9645 p_107350;
        p_107350.e0 = _107345;
        p_107350.e1 = _107347;
        p_107350.e2 = _107349;
        struct_vec_9645 _106999_446;
        _106999_446.e0 = 0.000000e+00;
        _106999_446.e1 = 1.000000e+00;
        _106999_446.e2 = 0.000000e+00;
        struct_Isect_9647 isect_107351;
        isect_107351.e0 = t_105694;
        isect_107351.e1 = p_107350;
        isect_107351.e2 = _106999_446;
        isect_107351.e3 = 1;
        pray_plane_intersect_105702 = isect_107351;
        goto l105700;
    l105700: ;
        ray_plane_intersect_105702 = pray_plane_intersect_105702;
        int _105703;
        _105703 = ray_plane_intersect_105702.e3;
        bool _105704;
        _105704 = _105703 == 1;
        if (_105704) goto l105705; else goto l107343;
    l107343: ;
        pocclusion_105708 = occlusion_105495;
        goto l105706;
    l105705: ;
        double _107342;
        _107342 = 1.000000e+00 + occlusion_105495;
        pocclusion_105708 = _107342;
        goto l105706;
    l105706: ;
        occlusion_105708 = pocclusion_105708;
        unsigned long _105709;
        _105709 = 4294883355 * lo_105510;
        unsigned long _105710;
        _105710 = _105709 + hi_105512;
        unsigned long lo_105711;
        lo_105711 = 4294967295 & _105710;
        unsigned long hi_105713;
        hi_105713 = _105710 >> 32;
        unsigned int _105712;
        _105712 = (unsigned int)lo_105711;
        unsigned int _105714;
        _105714 = (unsigned int)hi_105713;
        unsigned int _105715;
        _105715 = _105712 ^ _105714;
        double _105716;
        _105716 = (double)_105715;
        double _105717;
        _105717 = 2.328306e-10 * _105716;
        theta_105720 = sqrt(_105717);
        ptheta_105720 = theta_105720;
    l105718: ;
        theta_105720 = ptheta_105720;
        unsigned long _105721;
        _105721 = 4294883355 * lo_105711;
        unsigned long _105722;
        _105722 = _105721 + hi_105713;
        unsigned long lo_105723;
        lo_105723 = 4294967295 & _105722;
        unsigned long hi_105725;
        hi_105725 = _105722 >> 32;
        unsigned int _105724;
        _105724 = (unsigned int)lo_105723;
        unsigned int _105726;
        _105726 = (unsigned int)hi_105725;
        unsigned int _105727;
        _105727 = _105724 ^ _105726;
        double _105728;
        _105728 = (double)_105727;
        double _105729;
        _105729 = 2.328306e-10 * _105728;
        double phi_105730;
        phi_105730 = 6.283185e+00 * _105729;
        _105733 = cos(phi_105730);
        p_105733 = _105733;
    l105731: ;
        _105733 = p_105733;
        _105736 = sin(phi_105730);
        p_105736 = _105736;
    l105734: ;
        _105736 = p_105736;
        double _105737;
        _105737 = theta_105720 * theta_105720;
        double _105738;
        _105738 = 1.000000e+00 - _105737;
        z_105741 = sqrt(_105738);
        pz_105741 = z_105741;
    l105739: ;
        z_105741 = pz_105741;
        double _105760;
        _105760 = z_105741 * _105163;
        double _105747;
        _105747 = z_105741 * _105152;
        double _105753;
        _105753 = z_105741 * _105165;
        double x_105742;
        x_105742 = _105733 * theta_105720;
        double y_105744;
        y_105744 = _105736 * theta_105720;
        double _105757;
        _105757 = x_105742 * _105190;
        double _105743;
        _105743 = x_105742 * _105196;
        double _105750;
        _105750 = x_105742 * _105192;
        double _105758;
        _105758 = y_105744 * _105303;
        double _105745;
        _105745 = y_105744 * _105280;
        double _105751;
        _105751 = y_105744 * _105291;
        double _105759;
        _105759 = _105757 + _105758;
        double _105746;
        _105746 = _105743 + _105745;
        double _105752;
        _105752 = _105750 + _105751;
        double rz_105761;
        rz_105761 = _105759 + _105760;
        double rx_105748;
        rx_105748 = _105746 + _105747;
        double ry_105754;
        ry_105754 = _105752 + _105753;
        double _105762;
        _105762 = _105301 * rz_105761;
        double _105749;
        _105749 = _105276 * rx_105748;
        double _105755;
        _105755 = _105289 * ry_105754;
        double _105756;
        _105756 = _105749 + _105755;
        double _105763;
        _105763 = _105756 + _105762;
        double _105764;
        _105764 = _105763 * _105763;
        double D_105765;
        D_105765 = _105764 - C_105317;
        bool _105766;
        _105766 = 0.000000e+00 < D_105765;
        if (_105766) goto l105767; else goto l107341;
    l107341: ;
        goto l107338;
    l105767: ;
        _105770 = sqrt(D_105765);
        p_105770 = _105770;
    l105768: ;
        _105770 = p_105770;
        double _105771;
        _105771 = -0.000000e+00 - _105763;
        double t_105772;
        t_105772 = _105771 - _105770;
        bool _105773;
        _105773 = 0.000000e+00 < t_105772;
        if (_105773) goto l105774; else goto l107340;
    l107340: ;
        goto l107337;
    l105774: ;
        bool _105775;
        _105775 = t_105772 < 1.000000e+17;
        if (_105775) goto l105776; else goto l107336;
    l107336: ;
        goto l107337;
    l107337: ;
        goto l107338;
    l107338: ;
        struct_Isect_9647 _107049_475;
        _107049_475.e0 = 1.000000e+17;
        // bottom: _107049_475.e1 = // bottom: struct_vec_9645 _107047_479;;
        // bottom: _107049_475.e2 = _107047_479;
        _107049_475.e3 = 0;
        pray_sphere_intersect_105804 = _107049_475;
        goto l105802;
    l105776: ;
        double _105781;
        _105781 = ry_105754 * t_105772;
        double _105786;
        _105786 = rz_105761 * t_105772;
        double _105777;
        _105777 = rx_105748 * t_105772;
        double _105782;
        _105782 = _105288 + _105781;
        double _105787;
        _105787 = _105300 + _105786;
        double _105788;
        _105788 = _105787 - -3.500000e+00;
        double _105778;
        _105778 = _105275 + _105777;
        double _105783;
        _105783 = _105782 - 0.000000e+00;
        double _105789;
        _105789 = _105788 * _105788;
        double _105779;
        _105779 = _105778 - -2.000000e+00;
        double _105784;
        _105784 = _105783 * _105783;
        double _105780;
        _105780 = _105779 * _105779;
        double _105785;
        _105785 = _105780 + _105784;
        double _105790;
        _105790 = _105785 + _105789;
        length_105793 = sqrt(_105790);
        plength_105793 = length_105793;
    l105791: ;
        length_105793 = plength_105793;
        _105796 = fabs(length_105793);
        p_105796 = _105796;
    l105794: ;
        _105796 = p_105796;
        bool _105797;
        _105797 = 1.000000e-17 < _105796;
        if (_105797) goto l105798; else goto l107334;
    l107334: ;
        struct_vec_9645 n_107335;
        n_107335.e0 = _105779;
        n_107335.e1 = _105783;
        n_107335.e2 = _105788;
        pvnormalize_105801 = n_107335;
        goto l105799;
    l105798: ;
        double _107331;
        _107331 = _105783 / length_105793;
        double _107332;
        _107332 = _105788 / length_105793;
        double _107330;
        _107330 = _105779 / length_105793;
        struct_vec_9645 _107333;
        _107333.e0 = _107330;
        _107333.e1 = _107331;
        _107333.e2 = _107332;
        pvnormalize_105801 = _107333;
        goto l105799;
    l105799: ;
        vnormalize_105801 = pvnormalize_105801;
        struct_vec_9645 p_107328;
        p_107328.e0 = _105778;
        p_107328.e1 = _105782;
        p_107328.e2 = _105787;
        struct_Isect_9647 isect_107329;
        isect_107329.e0 = t_105772;
        isect_107329.e1 = p_107328;
        isect_107329.e2 = vnormalize_105801;
        isect_107329.e3 = 1;
        pray_sphere_intersect_105804 = isect_107329;
        goto l105802;
    l105802: ;
        ray_sphere_intersect_105804 = pray_sphere_intersect_105804;
        double _105805;
        _105805 = _105358 * rx_105748;
        double _105806;
        _105806 = _105805 + _105755;
        double _105807;
        _105807 = _105361 * rz_105761;
        double _105808;
        _105808 = _105806 + _105807;
        double _105809;
        _105809 = _105808 * _105808;
        double D_105810;
        D_105810 = _105809 - C_105369;
        bool _105811;
        _105811 = 0.000000e+00 < D_105810;
        if (_105811) goto l105812; else goto l107327;
    l107327: ;
        goto l107324;
    l105812: ;
        _105815 = sqrt(D_105810);
        p_105815 = _105815;
    l105813: ;
        _105815 = p_105815;
        double _105816;
        _105816 = -0.000000e+00 - _105808;
        double t_105817;
        t_105817 = _105816 - _105815;
        bool _105818;
        _105818 = 0.000000e+00 < t_105817;
        if (_105818) goto l105819; else goto l107326;
    l107326: ;
        goto l107323;
    l105819: ;
        double _105820;
        _105820 = ray_sphere_intersect_105804.e0;
        bool _105821;
        _105821 = t_105817 < _105820;
        if (_105821) goto l105822; else goto l107322;
    l107322: ;
        goto l107323;
    l107323: ;
        goto l107324;
    l107324: ;
        pray_sphere_intersect_105850 = ray_sphere_intersect_105804;
        goto l105848;
    l105822: ;
        double _105827;
        _105827 = ry_105754 * t_105817;
        double _105832;
        _105832 = rz_105761 * t_105817;
        double _105833;
        _105833 = _105300 + _105832;
        double _105823;
        _105823 = rx_105748 * t_105817;
        double _105828;
        _105828 = _105288 + _105827;
        double _105834;
        _105834 = _105833 - -3.000000e+00;
        double _105824;
        _105824 = _105275 + _105823;
        double _105829;
        _105829 = _105828 - 0.000000e+00;
        double _105835;
        _105835 = _105834 * _105834;
        double _105825;
        _105825 = _105824 - -5.000000e-01;
        double _105830;
        _105830 = _105829 * _105829;
        double _105826;
        _105826 = _105825 * _105825;
        double _105831;
        _105831 = _105826 + _105830;
        double _105836;
        _105836 = _105831 + _105835;
        length_105839 = sqrt(_105836);
        plength_105839 = length_105839;
    l105837: ;
        length_105839 = plength_105839;
        _105842 = fabs(length_105839);
        p_105842 = _105842;
    l105840: ;
        _105842 = p_105842;
        bool _105843;
        _105843 = 1.000000e-17 < _105842;
        if (_105843) goto l105844; else goto l107320;
    l107320: ;
        struct_vec_9645 n_107321;
        n_107321.e0 = _105825;
        n_107321.e1 = _105829;
        n_107321.e2 = _105834;
        pvnormalize_105847 = n_107321;
        goto l105845;
    l105844: ;
        double _107316;
        _107316 = _105825 / length_105839;
        double _107318;
        _107318 = _105834 / length_105839;
        double _107317;
        _107317 = _105829 / length_105839;
        struct_vec_9645 _107319;
        _107319.e0 = _107316;
        _107319.e1 = _107317;
        _107319.e2 = _107318;
        pvnormalize_105847 = _107319;
        goto l105845;
    l105845: ;
        vnormalize_105847 = pvnormalize_105847;
        struct_vec_9645 p_107314;
        p_107314.e0 = _105824;
        p_107314.e1 = _105828;
        p_107314.e2 = _105833;
        struct_Isect_9647 isect_107315;
        isect_107315.e0 = t_105817;
        isect_107315.e1 = p_107314;
        isect_107315.e2 = vnormalize_105847;
        isect_107315.e3 = 1;
        pray_sphere_intersect_105850 = isect_107315;
        goto l105848;
    l105848: ;
        ray_sphere_intersect_105850 = pray_sphere_intersect_105850;
        double _105853;
        _105853 = _105414 * rz_105761;
        double _105851;
        _105851 = _105411 * rx_105748;
        double _105852;
        _105852 = _105851 + _105755;
        double _105854;
        _105854 = _105852 + _105853;
        double _105855;
        _105855 = _105854 * _105854;
        double D_105856;
        D_105856 = _105855 - C_105422;
        bool _105857;
        _105857 = 0.000000e+00 < D_105856;
        if (_105857) goto l105858; else goto l107313;
    l107313: ;
        goto l107310;
    l105858: ;
        _105861 = sqrt(D_105856);
        p_105861 = _105861;
    l105859: ;
        _105861 = p_105861;
        double _105862;
        _105862 = -0.000000e+00 - _105854;
        double t_105863;
        t_105863 = _105862 - _105861;
        bool _105864;
        _105864 = 0.000000e+00 < t_105863;
        if (_105864) goto l105865; else goto l107312;
    l107312: ;
        goto l107309;
    l105865: ;
        double _105866;
        _105866 = ray_sphere_intersect_105850.e0;
        bool _105867;
        _105867 = t_105863 < _105866;
        if (_105867) goto l105868; else goto l107308;
    l107308: ;
        goto l107309;
    l107309: ;
        goto l107310;
    l107310: ;
        pray_sphere_intersect_105896 = ray_sphere_intersect_105850;
        goto l105894;
    l105868: ;
        double _105869;
        _105869 = rx_105748 * t_105863;
        double _105878;
        _105878 = rz_105761 * t_105863;
        double _105873;
        _105873 = ry_105754 * t_105863;
        double _105870;
        _105870 = _105275 + _105869;
        double _105879;
        _105879 = _105300 + _105878;
        double _105874;
        _105874 = _105288 + _105873;
        double _105871;
        _105871 = _105870 - 1.000000e+00;
        double _105880;
        _105880 = _105879 - -2.200000e+00;
        double _105875;
        _105875 = _105874 - 0.000000e+00;
        double _105872;
        _105872 = _105871 * _105871;
        double _105881;
        _105881 = _105880 * _105880;
        double _105876;
        _105876 = _105875 * _105875;
        double _105877;
        _105877 = _105872 + _105876;
        double _105882;
        _105882 = _105877 + _105881;
        length_105885 = sqrt(_105882);
        plength_105885 = length_105885;
    l105883: ;
        length_105885 = plength_105885;
        _105888 = fabs(length_105885);
        p_105888 = _105888;
    l105886: ;
        _105888 = p_105888;
        bool _105889;
        _105889 = 1.000000e-17 < _105888;
        if (_105889) goto l105890; else goto l107306;
    l107306: ;
        struct_vec_9645 n_107307;
        n_107307.e0 = _105871;
        n_107307.e1 = _105875;
        n_107307.e2 = _105880;
        pvnormalize_105893 = n_107307;
        goto l105891;
    l105890: ;
        double _107303;
        _107303 = _105875 / length_105885;
        double _107302;
        _107302 = _105871 / length_105885;
        double _107304;
        _107304 = _105880 / length_105885;
        struct_vec_9645 _107305;
        _107305.e0 = _107302;
        _107305.e1 = _107303;
        _107305.e2 = _107304;
        pvnormalize_105893 = _107305;
        goto l105891;
    l105891: ;
        vnormalize_105893 = pvnormalize_105893;
        struct_vec_9645 p_107300;
        p_107300.e0 = _105870;
        p_107300.e1 = _105874;
        p_107300.e2 = _105879;
        struct_Isect_9647 isect_107301;
        isect_107301.e0 = t_105863;
        isect_107301.e1 = p_107300;
        isect_107301.e2 = vnormalize_105893;
        isect_107301.e3 = 1;
        pray_sphere_intersect_105896 = isect_107301;
        goto l105894;
    l105894: ;
        ray_sphere_intersect_105896 = pray_sphere_intersect_105896;
        double _105900;
        _105900 = 0.000000e+00 * rz_105761;
        double _105898;
        _105898 = 1.000000e+00 * ry_105754;
        double _105897;
        _105897 = 0.000000e+00 * rx_105748;
        double _105899;
        _105899 = _105897 + _105898;
        double _105901;
        _105901 = _105899 + _105900;
        _105904 = fabs(_105901);
        p_105904 = _105904;
    l105902: ;
        _105904 = p_105904;
        bool _105905;
        _105905 = 1.000000e-17 <= _105904;
        if (_105905) goto l105906; else goto l107299;
    l107299: ;
        goto l107296;
    l105906: ;
        double t_105907;
        t_105907 = _105480 / _105901;
        bool _105908;
        _105908 = 0.000000e+00 < t_105907;
        if (_105908) goto l105909; else goto l107298;
    l107298: ;
        goto l107295;
    l105909: ;
        double _105910;
        _105910 = ray_sphere_intersect_105896.e0;
        bool _105911;
        _105911 = t_105907 < _105910;
        if (_105911) goto l105912; else goto l107294;
    l107294: ;
        goto l107295;
    l107295: ;
        goto l107296;
    l107296: ;
        pray_plane_intersect_105915 = ray_sphere_intersect_105896;
        goto l105913;
    l105912: ;
        double _107290;
        _107290 = rz_105761 * t_105907;
        double _107286;
        _107286 = rx_105748 * t_105907;
        double _107287;
        _107287 = _105275 + _107286;
        double _107288;
        _107288 = ry_105754 * t_105907;
        double _107291;
        _107291 = _105300 + _107290;
        double _107289;
        _107289 = _105288 + _107288;
        struct_vec_9645 p_107292;
        p_107292.e0 = _107287;
        p_107292.e1 = _107289;
        p_107292.e2 = _107291;
        struct_vec_9645 _106999_554;
        _106999_554.e0 = 0.000000e+00;
        _106999_554.e1 = 1.000000e+00;
        _106999_554.e2 = 0.000000e+00;
        struct_Isect_9647 isect_107293;
        isect_107293.e0 = t_105907;
        isect_107293.e1 = p_107292;
        isect_107293.e2 = _106999_554;
        isect_107293.e3 = 1;
        pray_plane_intersect_105915 = isect_107293;
        goto l105913;
    l105913: ;
        ray_plane_intersect_105915 = pray_plane_intersect_105915;
        int _105916;
        _105916 = ray_plane_intersect_105915.e3;
        bool _105917;
        _105917 = _105916 == 1;
        if (_105917) goto l105918; else goto l107285;
    l107285: ;
        pocclusion_105921 = occlusion_105708;
        goto l105919;
    l105918: ;
        double _107284;
        _107284 = 1.000000e+00 + occlusion_105708;
        pocclusion_105921 = _107284;
        goto l105919;
    l105919: ;
        occlusion_105921 = pocclusion_105921;
        unsigned long _105922;
        _105922 = 4294883355 * lo_105723;
        unsigned long _105923;
        _105923 = _105922 + hi_105725;
        unsigned long hi_105926;
        hi_105926 = _105923 >> 32;
        unsigned long lo_105924;
        lo_105924 = 4294967295 & _105923;
        unsigned int _105927;
        _105927 = (unsigned int)hi_105926;
        unsigned int _105925;
        _105925 = (unsigned int)lo_105924;
        unsigned int _105928;
        _105928 = _105925 ^ _105927;
        double _105929;
        _105929 = (double)_105928;
        double _105930;
        _105930 = 2.328306e-10 * _105929;
        theta_105933 = sqrt(_105930);
        ptheta_105933 = theta_105933;
    l105931: ;
        theta_105933 = ptheta_105933;
        unsigned long _105934;
        _105934 = 4294883355 * lo_105924;
        unsigned long _105935;
        _105935 = _105934 + hi_105926;
        unsigned long lo_105936;
        lo_105936 = 4294967295 & _105935;
        unsigned long hi_105938;
        hi_105938 = _105935 >> 32;
        unsigned int _105937;
        _105937 = (unsigned int)lo_105936;
        unsigned int _105939;
        _105939 = (unsigned int)hi_105938;
        unsigned int _105940;
        _105940 = _105937 ^ _105939;
        double _105941;
        _105941 = (double)_105940;
        double _105942;
        _105942 = 2.328306e-10 * _105941;
        double phi_105943;
        phi_105943 = 6.283185e+00 * _105942;
        _105946 = cos(phi_105943);
        p_105946 = _105946;
    l105944: ;
        _105946 = p_105946;
        _105949 = sin(phi_105943);
        p_105949 = _105949;
    l105947: ;
        _105949 = p_105949;
        double _105950;
        _105950 = theta_105933 * theta_105933;
        double _105951;
        _105951 = 1.000000e+00 - _105950;
        z_105954 = sqrt(_105951);
        pz_105954 = z_105954;
    l105952: ;
        z_105954 = pz_105954;
        double _105960;
        _105960 = z_105954 * _105152;
        double x_105955;
        x_105955 = _105946 * theta_105933;
        double _105963;
        _105963 = x_105955 * _105192;
        double _105970;
        _105970 = x_105955 * _105190;
        double _105966;
        _105966 = z_105954 * _105165;
        double _105973;
        _105973 = z_105954 * _105163;
        double _105956;
        _105956 = x_105955 * _105196;
        double y_105957;
        y_105957 = _105949 * theta_105933;
        double _105971;
        _105971 = y_105957 * _105303;
        double _105958;
        _105958 = y_105957 * _105280;
        double _105964;
        _105964 = y_105957 * _105291;
        double _105972;
        _105972 = _105970 + _105971;
        double _105959;
        _105959 = _105956 + _105958;
        double _105965;
        _105965 = _105963 + _105964;
        double rz_105974;
        rz_105974 = _105972 + _105973;
        double rx_105961;
        rx_105961 = _105959 + _105960;
        double ry_105967;
        ry_105967 = _105965 + _105966;
        double _105975;
        _105975 = _105301 * rz_105974;
        double _105962;
        _105962 = _105276 * rx_105961;
        double _105968;
        _105968 = _105289 * ry_105967;
        double _105969;
        _105969 = _105962 + _105968;
        double _105976;
        _105976 = _105969 + _105975;
        double _105977;
        _105977 = _105976 * _105976;
        double D_105978;
        D_105978 = _105977 - C_105317;
        bool _105979;
        _105979 = 0.000000e+00 < D_105978;
        if (_105979) goto l105980; else goto l107283;
    l107283: ;
        goto l107280;
    l105980: ;
        _105983 = sqrt(D_105978);
        p_105983 = _105983;
    l105981: ;
        _105983 = p_105983;
        double _105984;
        _105984 = -0.000000e+00 - _105976;
        double t_105985;
        t_105985 = _105984 - _105983;
        bool _105986;
        _105986 = 0.000000e+00 < t_105985;
        if (_105986) goto l105987; else goto l107282;
    l107282: ;
        goto l107279;
    l105987: ;
        bool _105988;
        _105988 = t_105985 < 1.000000e+17;
        if (_105988) goto l105989; else goto l107278;
    l107278: ;
        goto l107279;
    l107279: ;
        goto l107280;
    l107280: ;
        struct_Isect_9647 _107049_583;
        _107049_583.e0 = 1.000000e+17;
        // bottom: _107049_583.e1 = // bottom: struct_vec_9645 _107047_587;;
        // bottom: _107049_583.e2 = _107047_587;
        _107049_583.e3 = 0;
        pray_sphere_intersect_106017 = _107049_583;
        goto l106015;
    l105989: ;
        double _105994;
        _105994 = ry_105967 * t_105985;
        double _105995;
        _105995 = _105288 + _105994;
        double _105999;
        _105999 = rz_105974 * t_105985;
        double _105990;
        _105990 = rx_105961 * t_105985;
        double _105996;
        _105996 = _105995 - 0.000000e+00;
        double _106000;
        _106000 = _105300 + _105999;
        double _105991;
        _105991 = _105275 + _105990;
        double _105997;
        _105997 = _105996 * _105996;
        double _106001;
        _106001 = _106000 - -3.500000e+00;
        double _105992;
        _105992 = _105991 - -2.000000e+00;
        double _106002;
        _106002 = _106001 * _106001;
        double _105993;
        _105993 = _105992 * _105992;
        double _105998;
        _105998 = _105993 + _105997;
        double _106003;
        _106003 = _105998 + _106002;
        length_106006 = sqrt(_106003);
        plength_106006 = length_106006;
    l106004: ;
        length_106006 = plength_106006;
        _106009 = fabs(length_106006);
        p_106009 = _106009;
    l106007: ;
        _106009 = p_106009;
        bool _106010;
        _106010 = 1.000000e-17 < _106009;
        if (_106010) goto l106011; else goto l107276;
    l107276: ;
        struct_vec_9645 n_107277;
        n_107277.e0 = _105992;
        n_107277.e1 = _105996;
        n_107277.e2 = _106001;
        pvnormalize_106014 = n_107277;
        goto l106012;
    l106011: ;
        double _107273;
        _107273 = _105996 / length_106006;
        double _107272;
        _107272 = _105992 / length_106006;
        double _107274;
        _107274 = _106001 / length_106006;
        struct_vec_9645 _107275;
        _107275.e0 = _107272;
        _107275.e1 = _107273;
        _107275.e2 = _107274;
        pvnormalize_106014 = _107275;
        goto l106012;
    l106012: ;
        vnormalize_106014 = pvnormalize_106014;
        struct_vec_9645 p_107270;
        p_107270.e0 = _105991;
        p_107270.e1 = _105995;
        p_107270.e2 = _106000;
        struct_Isect_9647 isect_107271;
        isect_107271.e0 = t_105985;
        isect_107271.e1 = p_107270;
        isect_107271.e2 = vnormalize_106014;
        isect_107271.e3 = 1;
        pray_sphere_intersect_106017 = isect_107271;
        goto l106015;
    l106015: ;
        ray_sphere_intersect_106017 = pray_sphere_intersect_106017;
        double _106020;
        _106020 = _105361 * rz_105974;
        double _106018;
        _106018 = _105358 * rx_105961;
        double _106019;
        _106019 = _106018 + _105968;
        double _106021;
        _106021 = _106019 + _106020;
        double _106022;
        _106022 = _106021 * _106021;
        double D_106023;
        D_106023 = _106022 - C_105369;
        bool _106024;
        _106024 = 0.000000e+00 < D_106023;
        if (_106024) goto l106025; else goto l107269;
    l107269: ;
        goto l107266;
    l106025: ;
        _106028 = sqrt(D_106023);
        p_106028 = _106028;
    l106026: ;
        _106028 = p_106028;
        double _106029;
        _106029 = -0.000000e+00 - _106021;
        double t_106030;
        t_106030 = _106029 - _106028;
        bool _106031;
        _106031 = 0.000000e+00 < t_106030;
        if (_106031) goto l106032; else goto l107268;
    l107268: ;
        goto l107265;
    l106032: ;
        double _106033;
        _106033 = ray_sphere_intersect_106017.e0;
        bool _106034;
        _106034 = t_106030 < _106033;
        if (_106034) goto l106035; else goto l107264;
    l107264: ;
        goto l107265;
    l107265: ;
        goto l107266;
    l107266: ;
        pray_sphere_intersect_106063 = ray_sphere_intersect_106017;
        goto l106061;
    l106035: ;
        double _106045;
        _106045 = rz_105974 * t_106030;
        double _106040;
        _106040 = ry_105967 * t_106030;
        double _106041;
        _106041 = _105288 + _106040;
        double _106046;
        _106046 = _105300 + _106045;
        double _106042;
        _106042 = _106041 - 0.000000e+00;
        double _106036;
        _106036 = rx_105961 * t_106030;
        double _106047;
        _106047 = _106046 - -3.000000e+00;
        double _106043;
        _106043 = _106042 * _106042;
        double _106037;
        _106037 = _105275 + _106036;
        double _106048;
        _106048 = _106047 * _106047;
        double _106038;
        _106038 = _106037 - -5.000000e-01;
        double _106039;
        _106039 = _106038 * _106038;
        double _106044;
        _106044 = _106039 + _106043;
        double _106049;
        _106049 = _106044 + _106048;
        length_106052 = sqrt(_106049);
        plength_106052 = length_106052;
    l106050: ;
        length_106052 = plength_106052;
        _106055 = fabs(length_106052);
        p_106055 = _106055;
    l106053: ;
        _106055 = p_106055;
        bool _106056;
        _106056 = 1.000000e-17 < _106055;
        if (_106056) goto l106057; else goto l107262;
    l107262: ;
        struct_vec_9645 n_107263;
        n_107263.e0 = _106038;
        n_107263.e1 = _106042;
        n_107263.e2 = _106047;
        pvnormalize_106060 = n_107263;
        goto l106058;
    l106057: ;
        double _107258;
        _107258 = _106038 / length_106052;
        double _107259;
        _107259 = _106042 / length_106052;
        double _107260;
        _107260 = _106047 / length_106052;
        struct_vec_9645 _107261;
        _107261.e0 = _107258;
        _107261.e1 = _107259;
        _107261.e2 = _107260;
        pvnormalize_106060 = _107261;
        goto l106058;
    l106058: ;
        vnormalize_106060 = pvnormalize_106060;
        struct_vec_9645 p_107256;
        p_107256.e0 = _106037;
        p_107256.e1 = _106041;
        p_107256.e2 = _106046;
        struct_Isect_9647 isect_107257;
        isect_107257.e0 = t_106030;
        isect_107257.e1 = p_107256;
        isect_107257.e2 = vnormalize_106060;
        isect_107257.e3 = 1;
        pray_sphere_intersect_106063 = isect_107257;
        goto l106061;
    l106061: ;
        ray_sphere_intersect_106063 = pray_sphere_intersect_106063;
        double _106066;
        _106066 = _105414 * rz_105974;
        double _106064;
        _106064 = _105411 * rx_105961;
        double _106065;
        _106065 = _106064 + _105968;
        double _106067;
        _106067 = _106065 + _106066;
        double _106068;
        _106068 = _106067 * _106067;
        double D_106069;
        D_106069 = _106068 - C_105422;
        bool _106070;
        _106070 = 0.000000e+00 < D_106069;
        if (_106070) goto l106071; else goto l107255;
    l107255: ;
        goto l107252;
    l106071: ;
        _106074 = sqrt(D_106069);
        p_106074 = _106074;
    l106072: ;
        _106074 = p_106074;
        double _106075;
        _106075 = -0.000000e+00 - _106067;
        double t_106076;
        t_106076 = _106075 - _106074;
        bool _106077;
        _106077 = 0.000000e+00 < t_106076;
        if (_106077) goto l106078; else goto l107254;
    l107254: ;
        goto l107251;
    l106078: ;
        double _106079;
        _106079 = ray_sphere_intersect_106063.e0;
        bool _106080;
        _106080 = t_106076 < _106079;
        if (_106080) goto l106081; else goto l107250;
    l107250: ;
        goto l107251;
    l107251: ;
        goto l107252;
    l107252: ;
        pray_sphere_intersect_106109 = ray_sphere_intersect_106063;
        goto l106107;
    l106081: ;
        double _106091;
        _106091 = rz_105974 * t_106076;
        double _106086;
        _106086 = ry_105967 * t_106076;
        double _106092;
        _106092 = _105300 + _106091;
        double _106093;
        _106093 = _106092 - -2.200000e+00;
        double _106087;
        _106087 = _105288 + _106086;
        double _106082;
        _106082 = rx_105961 * t_106076;
        double _106083;
        _106083 = _105275 + _106082;
        double _106084;
        _106084 = _106083 - 1.000000e+00;
        double _106088;
        _106088 = _106087 - 0.000000e+00;
        double _106085;
        _106085 = _106084 * _106084;
        double _106094;
        _106094 = _106093 * _106093;
        double _106089;
        _106089 = _106088 * _106088;
        double _106090;
        _106090 = _106085 + _106089;
        double _106095;
        _106095 = _106090 + _106094;
        length_106098 = sqrt(_106095);
        plength_106098 = length_106098;
    l106096: ;
        length_106098 = plength_106098;
        _106101 = fabs(length_106098);
        p_106101 = _106101;
    l106099: ;
        _106101 = p_106101;
        bool _106102;
        _106102 = 1.000000e-17 < _106101;
        if (_106102) goto l106103; else goto l107248;
    l107248: ;
        struct_vec_9645 n_107249;
        n_107249.e0 = _106084;
        n_107249.e1 = _106088;
        n_107249.e2 = _106093;
        pvnormalize_106106 = n_107249;
        goto l106104;
    l106103: ;
        double _107244;
        _107244 = _106084 / length_106098;
        double _107246;
        _107246 = _106093 / length_106098;
        double _107245;
        _107245 = _106088 / length_106098;
        struct_vec_9645 _107247;
        _107247.e0 = _107244;
        _107247.e1 = _107245;
        _107247.e2 = _107246;
        pvnormalize_106106 = _107247;
        goto l106104;
    l106104: ;
        vnormalize_106106 = pvnormalize_106106;
        struct_vec_9645 p_107242;
        p_107242.e0 = _106083;
        p_107242.e1 = _106087;
        p_107242.e2 = _106092;
        struct_Isect_9647 isect_107243;
        isect_107243.e0 = t_106076;
        isect_107243.e1 = p_107242;
        isect_107243.e2 = vnormalize_106106;
        isect_107243.e3 = 1;
        pray_sphere_intersect_106109 = isect_107243;
        goto l106107;
    l106107: ;
        ray_sphere_intersect_106109 = pray_sphere_intersect_106109;
        double _106111;
        _106111 = 1.000000e+00 * ry_105967;
        double _106113;
        _106113 = 0.000000e+00 * rz_105974;
        double _106110;
        _106110 = 0.000000e+00 * rx_105961;
        double _106112;
        _106112 = _106110 + _106111;
        double _106114;
        _106114 = _106112 + _106113;
        _106117 = fabs(_106114);
        p_106117 = _106117;
    l106115: ;
        _106117 = p_106117;
        bool _106118;
        _106118 = 1.000000e-17 <= _106117;
        if (_106118) goto l106119; else goto l107241;
    l107241: ;
        goto l107238;
    l106119: ;
        double t_106120;
        t_106120 = _105480 / _106114;
        bool _106121;
        _106121 = 0.000000e+00 < t_106120;
        if (_106121) goto l106122; else goto l107240;
    l107240: ;
        goto l107237;
    l106122: ;
        double _106123;
        _106123 = ray_sphere_intersect_106109.e0;
        bool _106124;
        _106124 = t_106120 < _106123;
        if (_106124) goto l106125; else goto l107236;
    l107236: ;
        goto l107237;
    l107237: ;
        goto l107238;
    l107238: ;
        pray_plane_intersect_106128 = ray_sphere_intersect_106109;
        goto l106126;
    l106125: ;
        double _107230;
        _107230 = ry_105967 * t_106120;
        double _107231;
        _107231 = _105288 + _107230;
        double _107228;
        _107228 = rx_105961 * t_106120;
        double _107232;
        _107232 = rz_105974 * t_106120;
        double _107233;
        _107233 = _105300 + _107232;
        double _107229;
        _107229 = _105275 + _107228;
        struct_vec_9645 p_107234;
        p_107234.e0 = _107229;
        p_107234.e1 = _107231;
        p_107234.e2 = _107233;
        struct_vec_9645 _106999_662;
        _106999_662.e0 = 0.000000e+00;
        _106999_662.e1 = 1.000000e+00;
        _106999_662.e2 = 0.000000e+00;
        struct_Isect_9647 isect_107235;
        isect_107235.e0 = t_106120;
        isect_107235.e1 = p_107234;
        isect_107235.e2 = _106999_662;
        isect_107235.e3 = 1;
        pray_plane_intersect_106128 = isect_107235;
        goto l106126;
    l106126: ;
        ray_plane_intersect_106128 = pray_plane_intersect_106128;
        int _106129;
        _106129 = ray_plane_intersect_106128.e3;
        bool _106130;
        _106130 = _106129 == 1;
        if (_106130) goto l106131; else goto l107227;
    l107227: ;
        pocclusion_106134 = occlusion_105921;
        goto l106132;
    l106131: ;
        double _107226;
        _107226 = 1.000000e+00 + occlusion_105921;
        pocclusion_106134 = _107226;
        goto l106132;
    l106132: ;
        occlusion_106134 = pocclusion_106134;
        unsigned long _106135;
        _106135 = 4294883355 * lo_105936;
        unsigned long _106136;
        _106136 = _106135 + hi_105938;
        unsigned long lo_106137;
        lo_106137 = 4294967295 & _106136;
        unsigned long hi_106139;
        hi_106139 = _106136 >> 32;
        unsigned int _106138;
        _106138 = (unsigned int)lo_106137;
        unsigned int _106140;
        _106140 = (unsigned int)hi_106139;
        unsigned int _106141;
        _106141 = _106138 ^ _106140;
        double _106142;
        _106142 = (double)_106141;
        double _106143;
        _106143 = 2.328306e-10 * _106142;
        theta_106146 = sqrt(_106143);
        ptheta_106146 = theta_106146;
    l106144: ;
        theta_106146 = ptheta_106146;
        unsigned long _106147;
        _106147 = 4294883355 * lo_106137;
        unsigned long _106148;
        _106148 = _106147 + hi_106139;
        unsigned long hi_106151;
        hi_106151 = _106148 >> 32;
        unsigned long lo_106149;
        lo_106149 = 4294967295 & _106148;
        unsigned int _106152;
        _106152 = (unsigned int)hi_106151;
        unsigned int _106150;
        _106150 = (unsigned int)lo_106149;
        unsigned int _106153;
        _106153 = _106150 ^ _106152;
        double _106154;
        _106154 = (double)_106153;
        double _106155;
        _106155 = 2.328306e-10 * _106154;
        double phi_106156;
        phi_106156 = 6.283185e+00 * _106155;
        _106159 = cos(phi_106156);
        p_106159 = _106159;
    l106157: ;
        _106159 = p_106159;
        _106162 = sin(phi_106156);
        p_106162 = _106162;
    l106160: ;
        _106162 = p_106162;
        double _106163;
        _106163 = theta_106146 * theta_106146;
        double _106164;
        _106164 = 1.000000e+00 - _106163;
        z_106167 = sqrt(_106164);
        pz_106167 = z_106167;
    l106165: ;
        z_106167 = pz_106167;
        double x_106168;
        x_106168 = _106159 * theta_106146;
        double _106169;
        _106169 = x_106168 * _105196;
        double _106179;
        _106179 = z_106167 * _105165;
        double _106186;
        _106186 = z_106167 * _105163;
        double y_106170;
        y_106170 = _106162 * theta_106146;
        double _106176;
        _106176 = x_106168 * _105192;
        double _106173;
        _106173 = z_106167 * _105152;
        double _106183;
        _106183 = x_106168 * _105190;
        double _106184;
        _106184 = y_106170 * _105303;
        double _106171;
        _106171 = y_106170 * _105280;
        double _106177;
        _106177 = y_106170 * _105291;
        double _106178;
        _106178 = _106176 + _106177;
        double _106185;
        _106185 = _106183 + _106184;
        double _106172;
        _106172 = _106169 + _106171;
        double ry_106180;
        ry_106180 = _106178 + _106179;
        double rz_106187;
        rz_106187 = _106185 + _106186;
        double rx_106174;
        rx_106174 = _106172 + _106173;
        double _106181;
        _106181 = _105289 * ry_106180;
        double _106188;
        _106188 = _105301 * rz_106187;
        double _106175;
        _106175 = _105276 * rx_106174;
        double _106182;
        _106182 = _106175 + _106181;
        double _106189;
        _106189 = _106182 + _106188;
        double _106190;
        _106190 = _106189 * _106189;
        double D_106191;
        D_106191 = _106190 - C_105317;
        bool _106192;
        _106192 = 0.000000e+00 < D_106191;
        if (_106192) goto l106193; else goto l107225;
    l107225: ;
        goto l107222;
    l106193: ;
        _106196 = sqrt(D_106191);
        p_106196 = _106196;
    l106194: ;
        _106196 = p_106196;
        double _106197;
        _106197 = -0.000000e+00 - _106189;
        double t_106198;
        t_106198 = _106197 - _106196;
        bool _106199;
        _106199 = 0.000000e+00 < t_106198;
        if (_106199) goto l106200; else goto l107224;
    l107224: ;
        goto l107221;
    l106200: ;
        bool _106201;
        _106201 = t_106198 < 1.000000e+17;
        if (_106201) goto l106202; else goto l107220;
    l107220: ;
        goto l107221;
    l107221: ;
        goto l107222;
    l107222: ;
        struct_Isect_9647 _107049_691;
        _107049_691.e0 = 1.000000e+17;
        // bottom: _107049_691.e1 = // bottom: struct_vec_9645 _107047_695;;
        // bottom: _107049_691.e2 = _107047_695;
        _107049_691.e3 = 0;
        pray_sphere_intersect_106230 = _107049_691;
        goto l106228;
    l106202: ;
        double _106207;
        _106207 = ry_106180 * t_106198;
        double _106212;
        _106212 = rz_106187 * t_106198;
        double _106203;
        _106203 = rx_106174 * t_106198;
        double _106208;
        _106208 = _105288 + _106207;
        double _106213;
        _106213 = _105300 + _106212;
        double _106204;
        _106204 = _105275 + _106203;
        double _106209;
        _106209 = _106208 - 0.000000e+00;
        double _106214;
        _106214 = _106213 - -3.500000e+00;
        double _106205;
        _106205 = _106204 - -2.000000e+00;
        double _106210;
        _106210 = _106209 * _106209;
        double _106215;
        _106215 = _106214 * _106214;
        double _106206;
        _106206 = _106205 * _106205;
        double _106211;
        _106211 = _106206 + _106210;
        double _106216;
        _106216 = _106211 + _106215;
        length_106219 = sqrt(_106216);
        plength_106219 = length_106219;
    l106217: ;
        length_106219 = plength_106219;
        _106222 = fabs(length_106219);
        p_106222 = _106222;
    l106220: ;
        _106222 = p_106222;
        bool _106223;
        _106223 = 1.000000e-17 < _106222;
        if (_106223) goto l106224; else goto l107218;
    l107218: ;
        struct_vec_9645 n_107219;
        n_107219.e0 = _106205;
        n_107219.e1 = _106209;
        n_107219.e2 = _106214;
        pvnormalize_106227 = n_107219;
        goto l106225;
    l106224: ;
        double _107216;
        _107216 = _106214 / length_106219;
        double _107214;
        _107214 = _106205 / length_106219;
        double _107215;
        _107215 = _106209 / length_106219;
        struct_vec_9645 _107217;
        _107217.e0 = _107214;
        _107217.e1 = _107215;
        _107217.e2 = _107216;
        pvnormalize_106227 = _107217;
        goto l106225;
    l106225: ;
        vnormalize_106227 = pvnormalize_106227;
        struct_vec_9645 p_107212;
        p_107212.e0 = _106204;
        p_107212.e1 = _106208;
        p_107212.e2 = _106213;
        struct_Isect_9647 isect_107213;
        isect_107213.e0 = t_106198;
        isect_107213.e1 = p_107212;
        isect_107213.e2 = vnormalize_106227;
        isect_107213.e3 = 1;
        pray_sphere_intersect_106230 = isect_107213;
        goto l106228;
    l106228: ;
        ray_sphere_intersect_106230 = pray_sphere_intersect_106230;
        double _106231;
        _106231 = _105358 * rx_106174;
        double _106233;
        _106233 = _105361 * rz_106187;
        double _106232;
        _106232 = _106231 + _106181;
        double _106234;
        _106234 = _106232 + _106233;
        double _106235;
        _106235 = _106234 * _106234;
        double D_106236;
        D_106236 = _106235 - C_105369;
        bool _106237;
        _106237 = 0.000000e+00 < D_106236;
        if (_106237) goto l106238; else goto l107211;
    l107211: ;
        goto l107208;
    l106238: ;
        _106241 = sqrt(D_106236);
        p_106241 = _106241;
    l106239: ;
        _106241 = p_106241;
        double _106242;
        _106242 = -0.000000e+00 - _106234;
        double t_106243;
        t_106243 = _106242 - _106241;
        bool _106244;
        _106244 = 0.000000e+00 < t_106243;
        if (_106244) goto l106245; else goto l107210;
    l107210: ;
        goto l107207;
    l106245: ;
        double _106246;
        _106246 = ray_sphere_intersect_106230.e0;
        bool _106247;
        _106247 = t_106243 < _106246;
        if (_106247) goto l106248; else goto l107206;
    l107206: ;
        goto l107207;
    l107207: ;
        goto l107208;
    l107208: ;
        pray_sphere_intersect_106276 = ray_sphere_intersect_106230;
        goto l106274;
    l106248: ;
        double _106253;
        _106253 = ry_106180 * t_106243;
        double _106254;
        _106254 = _105288 + _106253;
        double _106249;
        _106249 = rx_106174 * t_106243;
        double _106258;
        _106258 = rz_106187 * t_106243;
        double _106259;
        _106259 = _105300 + _106258;
        double _106260;
        _106260 = _106259 - -3.000000e+00;
        double _106255;
        _106255 = _106254 - 0.000000e+00;
        double _106250;
        _106250 = _105275 + _106249;
        double _106261;
        _106261 = _106260 * _106260;
        double _106256;
        _106256 = _106255 * _106255;
        double _106251;
        _106251 = _106250 - -5.000000e-01;
        double _106252;
        _106252 = _106251 * _106251;
        double _106257;
        _106257 = _106252 + _106256;
        double _106262;
        _106262 = _106257 + _106261;
        length_106265 = sqrt(_106262);
        plength_106265 = length_106265;
    l106263: ;
        length_106265 = plength_106265;
        _106268 = fabs(length_106265);
        p_106268 = _106268;
    l106266: ;
        _106268 = p_106268;
        bool _106269;
        _106269 = 1.000000e-17 < _106268;
        if (_106269) goto l106270; else goto l107204;
    l107204: ;
        struct_vec_9645 n_107205;
        n_107205.e0 = _106251;
        n_107205.e1 = _106255;
        n_107205.e2 = _106260;
        pvnormalize_106273 = n_107205;
        goto l106271;
    l106270: ;
        double _107202;
        _107202 = _106260 / length_106265;
        double _107200;
        _107200 = _106251 / length_106265;
        double _107201;
        _107201 = _106255 / length_106265;
        struct_vec_9645 _107203;
        _107203.e0 = _107200;
        _107203.e1 = _107201;
        _107203.e2 = _107202;
        pvnormalize_106273 = _107203;
        goto l106271;
    l106271: ;
        vnormalize_106273 = pvnormalize_106273;
        struct_vec_9645 p_107198;
        p_107198.e0 = _106250;
        p_107198.e1 = _106254;
        p_107198.e2 = _106259;
        struct_Isect_9647 isect_107199;
        isect_107199.e0 = t_106243;
        isect_107199.e1 = p_107198;
        isect_107199.e2 = vnormalize_106273;
        isect_107199.e3 = 1;
        pray_sphere_intersect_106276 = isect_107199;
        goto l106274;
    l106274: ;
        ray_sphere_intersect_106276 = pray_sphere_intersect_106276;
        double _106277;
        _106277 = _105411 * rx_106174;
        double _106279;
        _106279 = _105414 * rz_106187;
        double _106278;
        _106278 = _106277 + _106181;
        double _106280;
        _106280 = _106278 + _106279;
        double _106281;
        _106281 = _106280 * _106280;
        double D_106282;
        D_106282 = _106281 - C_105422;
        bool _106283;
        _106283 = 0.000000e+00 < D_106282;
        if (_106283) goto l106284; else goto l107197;
    l107197: ;
        goto l107194;
    l106284: ;
        _106287 = sqrt(D_106282);
        p_106287 = _106287;
    l106285: ;
        _106287 = p_106287;
        double _106288;
        _106288 = -0.000000e+00 - _106280;
        double t_106289;
        t_106289 = _106288 - _106287;
        bool _106290;
        _106290 = 0.000000e+00 < t_106289;
        if (_106290) goto l106291; else goto l107196;
    l107196: ;
        goto l107193;
    l106291: ;
        double _106292;
        _106292 = ray_sphere_intersect_106276.e0;
        bool _106293;
        _106293 = t_106289 < _106292;
        if (_106293) goto l106294; else goto l107192;
    l107192: ;
        goto l107193;
    l107193: ;
        goto l107194;
    l107194: ;
        pray_sphere_intersect_106322 = ray_sphere_intersect_106276;
        goto l106320;
    l106294: ;
        double _106295;
        _106295 = rx_106174 * t_106289;
        double _106296;
        _106296 = _105275 + _106295;
        double _106297;
        _106297 = _106296 - 1.000000e+00;
        double _106298;
        _106298 = _106297 * _106297;
        double _106299;
        _106299 = ry_106180 * t_106289;
        double _106304;
        _106304 = rz_106187 * t_106289;
        double _106300;
        _106300 = _105288 + _106299;
        double _106305;
        _106305 = _105300 + _106304;
        double _106301;
        _106301 = _106300 - 0.000000e+00;
        double _106306;
        _106306 = _106305 - -2.200000e+00;
        double _106302;
        _106302 = _106301 * _106301;
        double _106307;
        _106307 = _106306 * _106306;
        double _106303;
        _106303 = _106298 + _106302;
        double _106308;
        _106308 = _106303 + _106307;
        length_106311 = sqrt(_106308);
        plength_106311 = length_106311;
    l106309: ;
        length_106311 = plength_106311;
        _106314 = fabs(length_106311);
        p_106314 = _106314;
    l106312: ;
        _106314 = p_106314;
        bool _106315;
        _106315 = 1.000000e-17 < _106314;
        if (_106315) goto l106316; else goto l107190;
    l107190: ;
        struct_vec_9645 n_107191;
        n_107191.e0 = _106297;
        n_107191.e1 = _106301;
        n_107191.e2 = _106306;
        pvnormalize_106319 = n_107191;
        goto l106317;
    l106316: ;
        double _107186;
        _107186 = _106297 / length_106311;
        double _107188;
        _107188 = _106306 / length_106311;
        double _107187;
        _107187 = _106301 / length_106311;
        struct_vec_9645 _107189;
        _107189.e0 = _107186;
        _107189.e1 = _107187;
        _107189.e2 = _107188;
        pvnormalize_106319 = _107189;
        goto l106317;
    l106317: ;
        vnormalize_106319 = pvnormalize_106319;
        struct_vec_9645 p_107184;
        p_107184.e0 = _106296;
        p_107184.e1 = _106300;
        p_107184.e2 = _106305;
        struct_Isect_9647 isect_107185;
        isect_107185.e0 = t_106289;
        isect_107185.e1 = p_107184;
        isect_107185.e2 = vnormalize_106319;
        isect_107185.e3 = 1;
        pray_sphere_intersect_106322 = isect_107185;
        goto l106320;
    l106320: ;
        ray_sphere_intersect_106322 = pray_sphere_intersect_106322;
        double _106326;
        _106326 = 0.000000e+00 * rz_106187;
        double _106323;
        _106323 = 0.000000e+00 * rx_106174;
        double _106324;
        _106324 = 1.000000e+00 * ry_106180;
        double _106325;
        _106325 = _106323 + _106324;
        double _106327;
        _106327 = _106325 + _106326;
        _106330 = fabs(_106327);
        p_106330 = _106330;
    l106328: ;
        _106330 = p_106330;
        bool _106331;
        _106331 = 1.000000e-17 <= _106330;
        if (_106331) goto l106332; else goto l107183;
    l107183: ;
        goto l107180;
    l106332: ;
        double t_106333;
        t_106333 = _105480 / _106327;
        bool _106334;
        _106334 = 0.000000e+00 < t_106333;
        if (_106334) goto l106335; else goto l107182;
    l107182: ;
        goto l107179;
    l106335: ;
        double _106336;
        _106336 = ray_sphere_intersect_106322.e0;
        bool _106337;
        _106337 = t_106333 < _106336;
        if (_106337) goto l106338; else goto l107178;
    l107178: ;
        goto l107179;
    l107179: ;
        goto l107180;
    l107180: ;
        pray_plane_intersect_106341 = ray_sphere_intersect_106322;
        goto l106339;
    l106338: ;
        double _107174;
        _107174 = rz_106187 * t_106333;
        double _107172;
        _107172 = ry_106180 * t_106333;
        double _107173;
        _107173 = _105288 + _107172;
        double _107170;
        _107170 = rx_106174 * t_106333;
        double _107175;
        _107175 = _105300 + _107174;
        double _107171;
        _107171 = _105275 + _107170;
        struct_vec_9645 p_107176;
        p_107176.e0 = _107171;
        p_107176.e1 = _107173;
        p_107176.e2 = _107175;
        struct_vec_9645 _106999_770;
        _106999_770.e0 = 0.000000e+00;
        _106999_770.e1 = 1.000000e+00;
        _106999_770.e2 = 0.000000e+00;
        struct_Isect_9647 isect_107177;
        isect_107177.e0 = t_106333;
        isect_107177.e1 = p_107176;
        isect_107177.e2 = _106999_770;
        isect_107177.e3 = 1;
        pray_plane_intersect_106341 = isect_107177;
        goto l106339;
    l106339: ;
        ray_plane_intersect_106341 = pray_plane_intersect_106341;
        int _106342;
        _106342 = ray_plane_intersect_106341.e3;
        bool _106343;
        _106343 = _106342 == 1;
        if (_106343) goto l106344; else goto l107169;
    l107169: ;
        pocclusion_106347 = occlusion_106134;
        goto l106345;
    l106344: ;
        double _107168;
        _107168 = 1.000000e+00 + occlusion_106134;
        pocclusion_106347 = _107168;
        goto l106345;
    l106345: ;
        occlusion_106347 = pocclusion_106347;
        unsigned long _106348;
        _106348 = 4294883355 * lo_106149;
        unsigned long _106349;
        _106349 = _106348 + hi_106151;
        unsigned long lo_106350;
        lo_106350 = 4294967295 & _106349;
        unsigned long hi_106352;
        hi_106352 = _106349 >> 32;
        unsigned int _106351;
        _106351 = (unsigned int)lo_106350;
        unsigned int _106353;
        _106353 = (unsigned int)hi_106352;
        unsigned int _106354;
        _106354 = _106351 ^ _106353;
        double _106355;
        _106355 = (double)_106354;
        double _106356;
        _106356 = 2.328306e-10 * _106355;
        theta_106359 = sqrt(_106356);
        ptheta_106359 = theta_106359;
    l106357: ;
        theta_106359 = ptheta_106359;
        unsigned long _106360;
        _106360 = 4294883355 * lo_106350;
        unsigned long _106361;
        _106361 = _106360 + hi_106352;
        unsigned long lo_106362;
        lo_106362 = 4294967295 & _106361;
        unsigned int _106363;
        _106363 = (unsigned int)lo_106362;
        unsigned long hi_106364;
        hi_106364 = _106361 >> 32;
        unsigned int _106365;
        _106365 = (unsigned int)hi_106364;
        unsigned int _106366;
        _106366 = _106363 ^ _106365;
        double _106367;
        _106367 = (double)_106366;
        double _106368;
        _106368 = 2.328306e-10 * _106367;
        double phi_106369;
        phi_106369 = 6.283185e+00 * _106368;
        _106372 = cos(phi_106369);
        p_106372 = _106372;
    l106370: ;
        _106372 = p_106372;
        _106375 = sin(phi_106369);
        p_106375 = _106375;
    l106373: ;
        _106375 = p_106375;
        double _106376;
        _106376 = theta_106359 * theta_106359;
        double _106377;
        _106377 = 1.000000e+00 - _106376;
        z_106380 = sqrt(_106377);
        pz_106380 = z_106380;
    l106378: ;
        z_106380 = pz_106380;
        double x_106381;
        x_106381 = _106372 * theta_106359;
        double y_106383;
        y_106383 = _106375 * theta_106359;
        double _106399;
        _106399 = z_106380 * _105163;
        double _106384;
        _106384 = y_106383 * _105280;
        double _106389;
        _106389 = x_106381 * _105192;
        double _106390;
        _106390 = y_106383 * _105291;
        double _106391;
        _106391 = _106389 + _106390;
        double _106386;
        _106386 = z_106380 * _105152;
        double _106392;
        _106392 = z_106380 * _105165;
        double _106396;
        _106396 = x_106381 * _105190;
        double _106382;
        _106382 = x_106381 * _105196;
        double _106397;
        _106397 = y_106383 * _105303;
        double _106385;
        _106385 = _106382 + _106384;
        double ry_106393;
        ry_106393 = _106391 + _106392;
        double rx_106387;
        rx_106387 = _106385 + _106386;
        double _106398;
        _106398 = _106396 + _106397;
        double _106394;
        _106394 = _105289 * ry_106393;
        double _106388;
        _106388 = _105276 * rx_106387;
        double rz_106400;
        rz_106400 = _106398 + _106399;
        double _106395;
        _106395 = _106388 + _106394;
        double _106401;
        _106401 = _105301 * rz_106400;
        double _106402;
        _106402 = _106395 + _106401;
        double _106403;
        _106403 = _106402 * _106402;
        double D_106404;
        D_106404 = _106403 - C_105317;
        bool _106405;
        _106405 = 0.000000e+00 < D_106404;
        if (_106405) goto l106406; else goto l107167;
    l107167: ;
        goto l107164;
    l106406: ;
        _106409 = sqrt(D_106404);
        p_106409 = _106409;
    l106407: ;
        _106409 = p_106409;
        double _106410;
        _106410 = -0.000000e+00 - _106402;
        double t_106411;
        t_106411 = _106410 - _106409;
        bool _106412;
        _106412 = 0.000000e+00 < t_106411;
        if (_106412) goto l106413; else goto l107166;
    l107166: ;
        goto l107163;
    l106413: ;
        bool _106414;
        _106414 = t_106411 < 1.000000e+17;
        if (_106414) goto l106415; else goto l107162;
    l107162: ;
        goto l107163;
    l107163: ;
        goto l107164;
    l107164: ;
        struct_Isect_9647 _107049_799;
        _107049_799.e0 = 1.000000e+17;
        // bottom: _107049_799.e1 = // bottom: struct_vec_9645 _107047_803;;
        // bottom: _107049_799.e2 = _107047_803;
        _107049_799.e3 = 0;
        pray_sphere_intersect_106443 = _107049_799;
        goto l106441;
    l106415: ;
        double _106425;
        _106425 = rz_106400 * t_106411;
        double _106416;
        _106416 = rx_106387 * t_106411;
        double _106417;
        _106417 = _105275 + _106416;
        double _106420;
        _106420 = ry_106393 * t_106411;
        double _106426;
        _106426 = _105300 + _106425;
        double _106418;
        _106418 = _106417 - -2.000000e+00;
        double _106421;
        _106421 = _105288 + _106420;
        double _106427;
        _106427 = _106426 - -3.500000e+00;
        double _106419;
        _106419 = _106418 * _106418;
        double _106422;
        _106422 = _106421 - 0.000000e+00;
        double _106428;
        _106428 = _106427 * _106427;
        double _106423;
        _106423 = _106422 * _106422;
        double _106424;
        _106424 = _106419 + _106423;
        double _106429;
        _106429 = _106424 + _106428;
        length_106432 = sqrt(_106429);
        plength_106432 = length_106432;
    l106430: ;
        length_106432 = plength_106432;
        _106435 = fabs(length_106432);
        p_106435 = _106435;
    l106433: ;
        _106435 = p_106435;
        bool _106436;
        _106436 = 1.000000e-17 < _106435;
        if (_106436) goto l106437; else goto l107160;
    l107160: ;
        struct_vec_9645 n_107161;
        n_107161.e0 = _106418;
        n_107161.e1 = _106422;
        n_107161.e2 = _106427;
        pvnormalize_106440 = n_107161;
        goto l106438;
    l106437: ;
        double _107157;
        _107157 = _106422 / length_106432;
        double _107158;
        _107158 = _106427 / length_106432;
        double _107156;
        _107156 = _106418 / length_106432;
        struct_vec_9645 _107159;
        _107159.e0 = _107156;
        _107159.e1 = _107157;
        _107159.e2 = _107158;
        pvnormalize_106440 = _107159;
        goto l106438;
    l106438: ;
        vnormalize_106440 = pvnormalize_106440;
        struct_vec_9645 p_107154;
        p_107154.e0 = _106417;
        p_107154.e1 = _106421;
        p_107154.e2 = _106426;
        struct_Isect_9647 isect_107155;
        isect_107155.e0 = t_106411;
        isect_107155.e1 = p_107154;
        isect_107155.e2 = vnormalize_106440;
        isect_107155.e3 = 1;
        pray_sphere_intersect_106443 = isect_107155;
        goto l106441;
    l106441: ;
        ray_sphere_intersect_106443 = pray_sphere_intersect_106443;
        double _106444;
        _106444 = _105358 * rx_106387;
        double _106446;
        _106446 = _105361 * rz_106400;
        double _106445;
        _106445 = _106444 + _106394;
        double _106447;
        _106447 = _106445 + _106446;
        double _106448;
        _106448 = _106447 * _106447;
        double D_106449;
        D_106449 = _106448 - C_105369;
        bool _106450;
        _106450 = 0.000000e+00 < D_106449;
        if (_106450) goto l106451; else goto l107153;
    l107153: ;
        goto l107150;
    l106451: ;
        _106454 = sqrt(D_106449);
        p_106454 = _106454;
    l106452: ;
        _106454 = p_106454;
        double _106455;
        _106455 = -0.000000e+00 - _106447;
        double t_106456;
        t_106456 = _106455 - _106454;
        bool _106457;
        _106457 = 0.000000e+00 < t_106456;
        if (_106457) goto l106458; else goto l107152;
    l107152: ;
        goto l107149;
    l106458: ;
        double _106459;
        _106459 = ray_sphere_intersect_106443.e0;
        bool _106460;
        _106460 = t_106456 < _106459;
        if (_106460) goto l106461; else goto l107148;
    l107148: ;
        goto l107149;
    l107149: ;
        goto l107150;
    l107150: ;
        pray_sphere_intersect_106489 = ray_sphere_intersect_106443;
        goto l106487;
    l106461: ;
        double _106462;
        _106462 = rx_106387 * t_106456;
        double _106471;
        _106471 = rz_106400 * t_106456;
        double _106463;
        _106463 = _105275 + _106462;
        double _106466;
        _106466 = ry_106393 * t_106456;
        double _106472;
        _106472 = _105300 + _106471;
        double _106467;
        _106467 = _105288 + _106466;
        double _106464;
        _106464 = _106463 - -5.000000e-01;
        double _106473;
        _106473 = _106472 - -3.000000e+00;
        double _106468;
        _106468 = _106467 - 0.000000e+00;
        double _106465;
        _106465 = _106464 * _106464;
        double _106474;
        _106474 = _106473 * _106473;
        double _106469;
        _106469 = _106468 * _106468;
        double _106470;
        _106470 = _106465 + _106469;
        double _106475;
        _106475 = _106470 + _106474;
        length_106478 = sqrt(_106475);
        plength_106478 = length_106478;
    l106476: ;
        length_106478 = plength_106478;
        _106481 = fabs(length_106478);
        p_106481 = _106481;
    l106479: ;
        _106481 = p_106481;
        bool _106482;
        _106482 = 1.000000e-17 < _106481;
        if (_106482) goto l106483; else goto l107146;
    l107146: ;
        struct_vec_9645 n_107147;
        n_107147.e0 = _106464;
        n_107147.e1 = _106468;
        n_107147.e2 = _106473;
        pvnormalize_106486 = n_107147;
        goto l106484;
    l106483: ;
        double _107143;
        _107143 = _106468 / length_106478;
        double _107144;
        _107144 = _106473 / length_106478;
        double _107142;
        _107142 = _106464 / length_106478;
        struct_vec_9645 _107145;
        _107145.e0 = _107142;
        _107145.e1 = _107143;
        _107145.e2 = _107144;
        pvnormalize_106486 = _107145;
        goto l106484;
    l106484: ;
        vnormalize_106486 = pvnormalize_106486;
        struct_vec_9645 p_107140;
        p_107140.e0 = _106463;
        p_107140.e1 = _106467;
        p_107140.e2 = _106472;
        struct_Isect_9647 isect_107141;
        isect_107141.e0 = t_106456;
        isect_107141.e1 = p_107140;
        isect_107141.e2 = vnormalize_106486;
        isect_107141.e3 = 1;
        pray_sphere_intersect_106489 = isect_107141;
        goto l106487;
    l106487: ;
        ray_sphere_intersect_106489 = pray_sphere_intersect_106489;
        double _106492;
        _106492 = _105414 * rz_106400;
        double _106490;
        _106490 = _105411 * rx_106387;
        double _106491;
        _106491 = _106490 + _106394;
        double _106493;
        _106493 = _106491 + _106492;
        double _106494;
        _106494 = _106493 * _106493;
        double D_106495;
        D_106495 = _106494 - C_105422;
        bool _106496;
        _106496 = 0.000000e+00 < D_106495;
        if (_106496) goto l106497; else goto l107139;
    l107139: ;
        goto l107136;
    l106497: ;
        _106500 = sqrt(D_106495);
        p_106500 = _106500;
    l106498: ;
        _106500 = p_106500;
        double _106501;
        _106501 = -0.000000e+00 - _106493;
        double t_106502;
        t_106502 = _106501 - _106500;
        bool _106503;
        _106503 = 0.000000e+00 < t_106502;
        if (_106503) goto l106504; else goto l107138;
    l107138: ;
        goto l107135;
    l106504: ;
        double _106505;
        _106505 = ray_sphere_intersect_106489.e0;
        bool _106506;
        _106506 = t_106502 < _106505;
        if (_106506) goto l106507; else goto l107134;
    l107134: ;
        goto l107135;
    l107135: ;
        goto l107136;
    l107136: ;
        pray_sphere_intersect_106535 = ray_sphere_intersect_106489;
        goto l106533;
    l106507: ;
        double _106517;
        _106517 = rz_106400 * t_106502;
        double _106518;
        _106518 = _105300 + _106517;
        double _106508;
        _106508 = rx_106387 * t_106502;
        double _106509;
        _106509 = _105275 + _106508;
        double _106512;
        _106512 = ry_106393 * t_106502;
        double _106513;
        _106513 = _105288 + _106512;
        double _106519;
        _106519 = _106518 - -2.200000e+00;
        double _106510;
        _106510 = _106509 - 1.000000e+00;
        double _106514;
        _106514 = _106513 - 0.000000e+00;
        double _106520;
        _106520 = _106519 * _106519;
        double _106511;
        _106511 = _106510 * _106510;
        double _106515;
        _106515 = _106514 * _106514;
        double _106516;
        _106516 = _106511 + _106515;
        double _106521;
        _106521 = _106516 + _106520;
        length_106524 = sqrt(_106521);
        plength_106524 = length_106524;
    l106522: ;
        length_106524 = plength_106524;
        _106527 = fabs(length_106524);
        p_106527 = _106527;
    l106525: ;
        _106527 = p_106527;
        bool _106528;
        _106528 = 1.000000e-17 < _106527;
        if (_106528) goto l106529; else goto l107132;
    l107132: ;
        struct_vec_9645 n_107133;
        n_107133.e0 = _106510;
        n_107133.e1 = _106514;
        n_107133.e2 = _106519;
        pvnormalize_106532 = n_107133;
        goto l106530;
    l106529: ;
        double _107129;
        _107129 = _106514 / length_106524;
        double _107128;
        _107128 = _106510 / length_106524;
        double _107130;
        _107130 = _106519 / length_106524;
        struct_vec_9645 _107131;
        _107131.e0 = _107128;
        _107131.e1 = _107129;
        _107131.e2 = _107130;
        pvnormalize_106532 = _107131;
        goto l106530;
    l106530: ;
        vnormalize_106532 = pvnormalize_106532;
        struct_vec_9645 p_107126;
        p_107126.e0 = _106509;
        p_107126.e1 = _106513;
        p_107126.e2 = _106518;
        struct_Isect_9647 isect_107127;
        isect_107127.e0 = t_106502;
        isect_107127.e1 = p_107126;
        isect_107127.e2 = vnormalize_106532;
        isect_107127.e3 = 1;
        pray_sphere_intersect_106535 = isect_107127;
        goto l106533;
    l106533: ;
        ray_sphere_intersect_106535 = pray_sphere_intersect_106535;
        double _106539;
        _106539 = 0.000000e+00 * rz_106400;
        double _106537;
        _106537 = 1.000000e+00 * ry_106393;
        double _106536;
        _106536 = 0.000000e+00 * rx_106387;
        double _106538;
        _106538 = _106536 + _106537;
        double _106540;
        _106540 = _106538 + _106539;
        _106543 = fabs(_106540);
        p_106543 = _106543;
    l106541: ;
        _106543 = p_106543;
        bool _106544;
        _106544 = 1.000000e-17 <= _106543;
        if (_106544) goto l106545; else goto l107125;
    l107125: ;
        goto l107122;
    l106545: ;
        double t_106546;
        t_106546 = _105480 / _106540;
        bool _106547;
        _106547 = 0.000000e+00 < t_106546;
        if (_106547) goto l106548; else goto l107124;
    l107124: ;
        goto l107121;
    l106548: ;
        double _106549;
        _106549 = ray_sphere_intersect_106535.e0;
        bool _106550;
        _106550 = t_106546 < _106549;
        if (_106550) goto l106551; else goto l107120;
    l107120: ;
        goto l107121;
    l107121: ;
        goto l107122;
    l107122: ;
        pray_plane_intersect_106554 = ray_sphere_intersect_106535;
        goto l106552;
    l106551: ;
        double _107116;
        _107116 = rz_106400 * t_106546;
        double _107112;
        _107112 = rx_106387 * t_106546;
        double _107114;
        _107114 = ry_106393 * t_106546;
        double _107113;
        _107113 = _105275 + _107112;
        double _107117;
        _107117 = _105300 + _107116;
        double _107115;
        _107115 = _105288 + _107114;
        struct_vec_9645 p_107118;
        p_107118.e0 = _107113;
        p_107118.e1 = _107115;
        p_107118.e2 = _107117;
        struct_vec_9645 _106999_878;
        _106999_878.e0 = 0.000000e+00;
        _106999_878.e1 = 1.000000e+00;
        _106999_878.e2 = 0.000000e+00;
        struct_Isect_9647 isect_107119;
        isect_107119.e0 = t_106546;
        isect_107119.e1 = p_107118;
        isect_107119.e2 = _106999_878;
        isect_107119.e3 = 1;
        pray_plane_intersect_106554 = isect_107119;
        goto l106552;
    l106552: ;
        ray_plane_intersect_106554 = pray_plane_intersect_106554;
        int _106555;
        _106555 = ray_plane_intersect_106554.e3;
        bool _106556;
        _106556 = _106555 == 1;
        if (_106556) goto l106557; else goto l107111;
    l107111: ;
        pocclusion_106560 = occlusion_106347;
        goto l106558;
    l106557: ;
        double _107110;
        _107110 = 1.000000e+00 + occlusion_106347;
        pocclusion_106560 = _107110;
        goto l106558;
    l106558: ;
        occlusion_106560 = pocclusion_106560;
        unsigned long _106561;
        _106561 = 4294883355 * lo_106362;
        unsigned long _106562;
        _106562 = _106561 + hi_106364;
        unsigned long lo_106563;
        lo_106563 = 4294967295 & _106562;
        unsigned long hi_106565;
        hi_106565 = _106562 >> 32;
        unsigned int _106564;
        _106564 = (unsigned int)lo_106563;
        unsigned int _106566;
        _106566 = (unsigned int)hi_106565;
        unsigned int _106567;
        _106567 = _106564 ^ _106566;
        double _106568;
        _106568 = (double)_106567;
        double _106569;
        _106569 = 2.328306e-10 * _106568;
        theta_106572 = sqrt(_106569);
        ptheta_106572 = theta_106572;
    l106570: ;
        theta_106572 = ptheta_106572;
        unsigned long _106573;
        _106573 = 4294883355 * lo_106563;
        unsigned long _106574;
        _106574 = _106573 + hi_106565;
        unsigned long lo_106575;
        lo_106575 = 4294967295 & _106574;
        unsigned long hi_106577;
        hi_106577 = _106574 >> 32;
        unsigned int _106576;
        _106576 = (unsigned int)lo_106575;
        unsigned int _106578;
        _106578 = (unsigned int)hi_106577;
        unsigned int _106579;
        _106579 = _106576 ^ _106578;
        double _106580;
        _106580 = (double)_106579;
        double _106581;
        _106581 = 2.328306e-10 * _106580;
        double phi_106582;
        phi_106582 = 6.283185e+00 * _106581;
        _106585 = cos(phi_106582);
        p_106585 = _106585;
    l106583: ;
        _106585 = p_106585;
        _106588 = sin(phi_106582);
        p_106588 = _106588;
    l106586: ;
        _106588 = p_106588;
        double _106589;
        _106589 = theta_106572 * theta_106572;
        double _106590;
        _106590 = 1.000000e+00 - _106589;
        z_106593 = sqrt(_106590);
        pz_106593 = z_106593;
    l106591: ;
        z_106593 = pz_106593;
        double _106612;
        _106612 = z_106593 * _105163;
        double y_106596;
        y_106596 = _106588 * theta_106572;
        double _106603;
        _106603 = y_106596 * _105291;
        double x_106594;
        x_106594 = _106585 * theta_106572;
        double _106599;
        _106599 = z_106593 * _105152;
        double _106605;
        _106605 = z_106593 * _105165;
        double _106610;
        _106610 = y_106596 * _105303;
        double _106597;
        _106597 = y_106596 * _105280;
        double _106609;
        _106609 = x_106594 * _105190;
        double _106595;
        _106595 = x_106594 * _105196;
        double _106602;
        _106602 = x_106594 * _105192;
        double _106611;
        _106611 = _106609 + _106610;
        double _106598;
        _106598 = _106595 + _106597;
        double _106604;
        _106604 = _106602 + _106603;
        double rz_106613;
        rz_106613 = _106611 + _106612;
        double rx_106600;
        rx_106600 = _106598 + _106599;
        double ry_106606;
        ry_106606 = _106604 + _106605;
        double _106614;
        _106614 = _105301 * rz_106613;
        double _106601;
        _106601 = _105276 * rx_106600;
        double _106607;
        _106607 = _105289 * ry_106606;
        double _106608;
        _106608 = _106601 + _106607;
        double _106615;
        _106615 = _106608 + _106614;
        double _106616;
        _106616 = _106615 * _106615;
        double D_106617;
        D_106617 = _106616 - C_105317;
        bool _106618;
        _106618 = 0.000000e+00 < D_106617;
        if (_106618) goto l106619; else goto l107109;
    l107109: ;
        goto l107106;
    l106619: ;
        _106622 = sqrt(D_106617);
        p_106622 = _106622;
    l106620: ;
        _106622 = p_106622;
        double _106623;
        _106623 = -0.000000e+00 - _106615;
        double t_106624;
        t_106624 = _106623 - _106622;
        bool _106625;
        _106625 = 0.000000e+00 < t_106624;
        if (_106625) goto l106626; else goto l107108;
    l107108: ;
        goto l107105;
    l106626: ;
        bool _106627;
        _106627 = t_106624 < 1.000000e+17;
        if (_106627) goto l106628; else goto l107104;
    l107104: ;
        goto l107105;
    l107105: ;
        goto l107106;
    l107106: ;
        struct_Isect_9647 _107049_907;
        _107049_907.e0 = 1.000000e+17;
        // bottom: _107049_907.e1 = // bottom: struct_vec_9645 _107047_911;;
        // bottom: _107049_907.e2 = _107047_911;
        _107049_907.e3 = 0;
        pray_sphere_intersect_106656 = _107049_907;
        goto l106654;
    l106628: ;
        double _106633;
        _106633 = ry_106606 * t_106624;
        double _106634;
        _106634 = _105288 + _106633;
        double _106629;
        _106629 = rx_106600 * t_106624;
        double _106638;
        _106638 = rz_106613 * t_106624;
        double _106635;
        _106635 = _106634 - 0.000000e+00;
        double _106630;
        _106630 = _105275 + _106629;
        double _106639;
        _106639 = _105300 + _106638;
        double _106636;
        _106636 = _106635 * _106635;
        double _106631;
        _106631 = _106630 - -2.000000e+00;
        double _106640;
        _106640 = _106639 - -3.500000e+00;
        double _106632;
        _106632 = _106631 * _106631;
        double _106641;
        _106641 = _106640 * _106640;
        double _106637;
        _106637 = _106632 + _106636;
        double _106642;
        _106642 = _106637 + _106641;
        length_106645 = sqrt(_106642);
        plength_106645 = length_106645;
    l106643: ;
        length_106645 = plength_106645;
        _106648 = fabs(length_106645);
        p_106648 = _106648;
    l106646: ;
        _106648 = p_106648;
        bool _106649;
        _106649 = 1.000000e-17 < _106648;
        if (_106649) goto l106650; else goto l107102;
    l107102: ;
        struct_vec_9645 n_107103;
        n_107103.e0 = _106631;
        n_107103.e1 = _106635;
        n_107103.e2 = _106640;
        pvnormalize_106653 = n_107103;
        goto l106651;
    l106650: ;
        double _107099;
        _107099 = _106635 / length_106645;
        double _107098;
        _107098 = _106631 / length_106645;
        double _107100;
        _107100 = _106640 / length_106645;
        struct_vec_9645 _107101;
        _107101.e0 = _107098;
        _107101.e1 = _107099;
        _107101.e2 = _107100;
        pvnormalize_106653 = _107101;
        goto l106651;
    l106651: ;
        vnormalize_106653 = pvnormalize_106653;
        struct_vec_9645 p_107096;
        p_107096.e0 = _106630;
        p_107096.e1 = _106634;
        p_107096.e2 = _106639;
        struct_Isect_9647 isect_107097;
        isect_107097.e0 = t_106624;
        isect_107097.e1 = p_107096;
        isect_107097.e2 = vnormalize_106653;
        isect_107097.e3 = 1;
        pray_sphere_intersect_106656 = isect_107097;
        goto l106654;
    l106654: ;
        ray_sphere_intersect_106656 = pray_sphere_intersect_106656;
        double _106659;
        _106659 = _105361 * rz_106613;
        double _106657;
        _106657 = _105358 * rx_106600;
        double _106658;
        _106658 = _106657 + _106607;
        double _106660;
        _106660 = _106658 + _106659;
        double _106661;
        _106661 = _106660 * _106660;
        double D_106662;
        D_106662 = _106661 - C_105369;
        bool _106663;
        _106663 = 0.000000e+00 < D_106662;
        if (_106663) goto l106664; else goto l107095;
    l107095: ;
        goto l107092;
    l106664: ;
        _106667 = sqrt(D_106662);
        p_106667 = _106667;
    l106665: ;
        _106667 = p_106667;
        double _106668;
        _106668 = -0.000000e+00 - _106660;
        double t_106669;
        t_106669 = _106668 - _106667;
        bool _106670;
        _106670 = 0.000000e+00 < t_106669;
        if (_106670) goto l106671; else goto l107094;
    l107094: ;
        goto l107091;
    l106671: ;
        double _106672;
        _106672 = ray_sphere_intersect_106656.e0;
        bool _106673;
        _106673 = t_106669 < _106672;
        if (_106673) goto l106674; else goto l107090;
    l107090: ;
        goto l107091;
    l107091: ;
        goto l107092;
    l107092: ;
        pray_sphere_intersect_106702 = ray_sphere_intersect_106656;
        goto l106700;
    l106674: ;
        double _106684;
        _106684 = rz_106613 * t_106669;
        double _106675;
        _106675 = rx_106600 * t_106669;
        double _106679;
        _106679 = ry_106606 * t_106669;
        double _106685;
        _106685 = _105300 + _106684;
        double _106676;
        _106676 = _105275 + _106675;
        double _106680;
        _106680 = _105288 + _106679;
        double _106686;
        _106686 = _106685 - -3.000000e+00;
        double _106677;
        _106677 = _106676 - -5.000000e-01;
        double _106681;
        _106681 = _106680 - 0.000000e+00;
        double _106687;
        _106687 = _106686 * _106686;
        double _106678;
        _106678 = _106677 * _106677;
        double _106682;
        _106682 = _106681 * _106681;
        double _106683;
        _106683 = _106678 + _106682;
        double _106688;
        _106688 = _106683 + _106687;
        length_106691 = sqrt(_106688);
        plength_106691 = length_106691;
    l106689: ;
        length_106691 = plength_106691;
        _106694 = fabs(length_106691);
        p_106694 = _106694;
    l106692: ;
        _106694 = p_106694;
        bool _106695;
        _106695 = 1.000000e-17 < _106694;
        if (_106695) goto l106696; else goto l107088;
    l107088: ;
        struct_vec_9645 n_107089;
        n_107089.e0 = _106677;
        n_107089.e1 = _106681;
        n_107089.e2 = _106686;
        pvnormalize_106699 = n_107089;
        goto l106697;
    l106696: ;
        double _107084;
        _107084 = _106677 / length_106691;
        double _107085;
        _107085 = _106681 / length_106691;
        double _107086;
        _107086 = _106686 / length_106691;
        struct_vec_9645 _107087;
        _107087.e0 = _107084;
        _107087.e1 = _107085;
        _107087.e2 = _107086;
        pvnormalize_106699 = _107087;
        goto l106697;
    l106697: ;
        vnormalize_106699 = pvnormalize_106699;
        struct_vec_9645 p_107082;
        p_107082.e0 = _106676;
        p_107082.e1 = _106680;
        p_107082.e2 = _106685;
        struct_Isect_9647 isect_107083;
        isect_107083.e0 = t_106669;
        isect_107083.e1 = p_107082;
        isect_107083.e2 = vnormalize_106699;
        isect_107083.e3 = 1;
        pray_sphere_intersect_106702 = isect_107083;
        goto l106700;
    l106700: ;
        ray_sphere_intersect_106702 = pray_sphere_intersect_106702;
        double _106705;
        _106705 = _105414 * rz_106613;
        double _106703;
        _106703 = _105411 * rx_106600;
        double _106704;
        _106704 = _106703 + _106607;
        double _106706;
        _106706 = _106704 + _106705;
        double _106707;
        _106707 = _106706 * _106706;
        double D_106708;
        D_106708 = _106707 - C_105422;
        bool _106709;
        _106709 = 0.000000e+00 < D_106708;
        if (_106709) goto l106710; else goto l107081;
    l107081: ;
        goto l107078;
    l106710: ;
        _106713 = sqrt(D_106708);
        p_106713 = _106713;
    l106711: ;
        _106713 = p_106713;
        double _106714;
        _106714 = -0.000000e+00 - _106706;
        double t_106715;
        t_106715 = _106714 - _106713;
        bool _106716;
        _106716 = 0.000000e+00 < t_106715;
        if (_106716) goto l106717; else goto l107080;
    l107080: ;
        goto l107077;
    l106717: ;
        double _106718;
        _106718 = ray_sphere_intersect_106702.e0;
        bool _106719;
        _106719 = t_106715 < _106718;
        if (_106719) goto l106720; else goto l107076;
    l107076: ;
        goto l107077;
    l107077: ;
        goto l107078;
    l107078: ;
        pray_sphere_intersect_106748 = ray_sphere_intersect_106702;
        goto l106746;
    l106720: ;
        double _106730;
        _106730 = rz_106613 * t_106715;
        double _106721;
        _106721 = rx_106600 * t_106715;
        double _106725;
        _106725 = ry_106606 * t_106715;
        double _106726;
        _106726 = _105288 + _106725;
        double _106727;
        _106727 = _106726 - 0.000000e+00;
        double _106722;
        _106722 = _105275 + _106721;
        double _106723;
        _106723 = _106722 - 1.000000e+00;
        double _106731;
        _106731 = _105300 + _106730;
        double _106732;
        _106732 = _106731 - -2.200000e+00;
        double _106728;
        _106728 = _106727 * _106727;
        double _106724;
        _106724 = _106723 * _106723;
        double _106733;
        _106733 = _106732 * _106732;
        double _106729;
        _106729 = _106724 + _106728;
        double _106734;
        _106734 = _106729 + _106733;
        length_106737 = sqrt(_106734);
        plength_106737 = length_106737;
    l106735: ;
        length_106737 = plength_106737;
        _106740 = fabs(length_106737);
        p_106740 = _106740;
    l106738: ;
        _106740 = p_106740;
        bool _106741;
        _106741 = 1.000000e-17 < _106740;
        if (_106741) goto l106742; else goto l107074;
    l107074: ;
        struct_vec_9645 n_107075;
        n_107075.e0 = _106723;
        n_107075.e1 = _106727;
        n_107075.e2 = _106732;
        pvnormalize_106745 = n_107075;
        goto l106743;
    l106742: ;
        double _107072;
        _107072 = _106732 / length_106737;
        double _107070;
        _107070 = _106723 / length_106737;
        double _107071;
        _107071 = _106727 / length_106737;
        struct_vec_9645 _107073;
        _107073.e0 = _107070;
        _107073.e1 = _107071;
        _107073.e2 = _107072;
        pvnormalize_106745 = _107073;
        goto l106743;
    l106743: ;
        vnormalize_106745 = pvnormalize_106745;
        struct_vec_9645 p_107068;
        p_107068.e0 = _106722;
        p_107068.e1 = _106726;
        p_107068.e2 = _106731;
        struct_Isect_9647 isect_107069;
        isect_107069.e0 = t_106715;
        isect_107069.e1 = p_107068;
        isect_107069.e2 = vnormalize_106745;
        isect_107069.e3 = 1;
        pray_sphere_intersect_106748 = isect_107069;
        goto l106746;
    l106746: ;
        ray_sphere_intersect_106748 = pray_sphere_intersect_106748;
        double _106749;
        _106749 = 0.000000e+00 * rx_106600;
        double _106752;
        _106752 = 0.000000e+00 * rz_106613;
        double _106750;
        _106750 = 1.000000e+00 * ry_106606;
        double _106751;
        _106751 = _106749 + _106750;
        double _106753;
        _106753 = _106751 + _106752;
        _106756 = fabs(_106753);
        p_106756 = _106756;
    l106754: ;
        _106756 = p_106756;
        bool _106757;
        _106757 = 1.000000e-17 <= _106756;
        if (_106757) goto l106758; else goto l107067;
    l107067: ;
        goto l107064;
    l106758: ;
        double t_106759;
        t_106759 = _105480 / _106753;
        bool _106760;
        _106760 = 0.000000e+00 < t_106759;
        if (_106760) goto l106761; else goto l107066;
    l107066: ;
        goto l107063;
    l106761: ;
        double _106762;
        _106762 = ray_sphere_intersect_106748.e0;
        bool _106763;
        _106763 = t_106759 < _106762;
        if (_106763) goto l106764; else goto l107062;
    l107062: ;
        goto l107063;
    l107063: ;
        goto l107064;
    l107064: ;
        pray_plane_intersect_106767 = ray_sphere_intersect_106748;
        goto l106765;
    l106764: ;
        double _107054;
        _107054 = rx_106600 * t_106759;
        double _107056;
        _107056 = ry_106606 * t_106759;
        double _107055;
        _107055 = _105275 + _107054;
        double _107057;
        _107057 = _105288 + _107056;
        double _107058;
        _107058 = rz_106613 * t_106759;
        double _107059;
        _107059 = _105300 + _107058;
        struct_vec_9645 p_107060;
        p_107060.e0 = _107055;
        p_107060.e1 = _107057;
        p_107060.e2 = _107059;
        struct_vec_9645 _106999_986;
        _106999_986.e0 = 0.000000e+00;
        _106999_986.e1 = 1.000000e+00;
        _106999_986.e2 = 0.000000e+00;
        struct_Isect_9647 isect_107061;
        isect_107061.e0 = t_106759;
        isect_107061.e1 = p_107060;
        isect_107061.e2 = _106999_986;
        isect_107061.e3 = 1;
        pray_plane_intersect_106767 = isect_107061;
        goto l106765;
    l106765: ;
        ray_plane_intersect_106767 = pray_plane_intersect_106767;
        int _106768;
        _106768 = ray_plane_intersect_106767.e3;
        bool _106769;
        _106769 = _106768 == 1;
        if (_106769) goto l106770; else goto l107053;
    l107053: ;
        pocclusion_106773 = occlusion_106560;
        goto l106771;
    l106770: ;
        double _107052;
        _107052 = 1.000000e+00 + occlusion_106560;
        pocclusion_106773 = _107052;
        goto l106771;
    l106771: ;
        occlusion_106773 = pocclusion_106773;
        unsigned long _106774;
        _106774 = 4294883355 * lo_106575;
        unsigned long _106775;
        _106775 = _106774 + hi_106577;
        unsigned long hi_106778;
        hi_106778 = _106775 >> 32;
        unsigned long lo_106776;
        lo_106776 = 4294967295 & _106775;
        unsigned int _106779;
        _106779 = (unsigned int)hi_106778;
        unsigned int _106777;
        _106777 = (unsigned int)lo_106776;
        unsigned int _106780;
        _106780 = _106777 ^ _106779;
        double _106781;
        _106781 = (double)_106780;
        double _106782;
        _106782 = 2.328306e-10 * _106781;
        theta_106785 = sqrt(_106782);
        ptheta_106785 = theta_106785;
    l106783: ;
        theta_106785 = ptheta_106785;
        unsigned long _106786;
        _106786 = 4294883355 * lo_106776;
        unsigned long _106787;
        _106787 = _106786 + hi_106778;
        unsigned long hi_106790;
        hi_106790 = _106787 >> 32;
        unsigned long lo_106788;
        lo_106788 = 4294967295 & _106787;
        unsigned int _106791;
        _106791 = (unsigned int)hi_106790;
        unsigned int _106789;
        _106789 = (unsigned int)lo_106788;
        unsigned int _106792;
        _106792 = _106789 ^ _106791;
        double _106793;
        _106793 = (double)_106792;
        double _106794;
        _106794 = 2.328306e-10 * _106793;
        double phi_106795;
        phi_106795 = 6.283185e+00 * _106794;
        _106798 = cos(phi_106795);
        p_106798 = _106798;
    l106796: ;
        _106798 = p_106798;
        _106801 = sin(phi_106795);
        p_106801 = _106801;
    l106799: ;
        _106801 = p_106801;
        double _106802;
        _106802 = theta_106785 * theta_106785;
        double _106803;
        _106803 = 1.000000e+00 - _106802;
        z_106806 = sqrt(_106803);
        pz_106806 = z_106806;
    l106804: ;
        z_106806 = pz_106806;
        double x_106807;
        x_106807 = _106798 * theta_106785;
        double y_106809;
        y_106809 = _106801 * theta_106785;
        double _106815;
        _106815 = x_106807 * _105192;
        double _106823;
        _106823 = y_106809 * _105303;
        double _106812;
        _106812 = z_106806 * _105152;
        double _106810;
        _106810 = y_106809 * _105280;
        double _106822;
        _106822 = x_106807 * _105190;
        double _106824;
        _106824 = _106822 + _106823;
        double _106825;
        _106825 = z_106806 * _105163;
        double _106818;
        _106818 = z_106806 * _105165;
        double _106816;
        _106816 = y_106809 * _105291;
        double _106808;
        _106808 = x_106807 * _105196;
        double _106817;
        _106817 = _106815 + _106816;
        double _106811;
        _106811 = _106808 + _106810;
        double rz_106826;
        rz_106826 = _106824 + _106825;
        double ry_106819;
        ry_106819 = _106817 + _106818;
        double rx_106813;
        rx_106813 = _106811 + _106812;
        double _106827;
        _106827 = _105301 * rz_106826;
        double _106820;
        _106820 = _105289 * ry_106819;
        double _106814;
        _106814 = _105276 * rx_106813;
        double _106821;
        _106821 = _106814 + _106820;
        double _106828;
        _106828 = _106821 + _106827;
        double _106829;
        _106829 = _106828 * _106828;
        double D_106830;
        D_106830 = _106829 - C_105317;
        bool _106831;
        _106831 = 0.000000e+00 < D_106830;
        if (_106831) goto l106832; else goto l107051;
    l107051: ;
        goto l107045;
    l106832: ;
        _106835 = sqrt(D_106830);
        p_106835 = _106835;
    l106833: ;
        _106835 = p_106835;
        double _106836;
        _106836 = -0.000000e+00 - _106828;
        double t_106837;
        t_106837 = _106836 - _106835;
        bool _106838;
        _106838 = 0.000000e+00 < t_106837;
        if (_106838) goto l106839; else goto l107050;
    l107050: ;
        goto l107044;
    l106839: ;
        bool _106840;
        _106840 = t_106837 < 1.000000e+17;
        if (_106840) goto l106841; else goto l107043;
    l107043: ;
        goto l107044;
    l107044: ;
        goto l107045;
    l107045: ;
        struct_Isect_9647 _107049_1015;
        _107049_1015.e0 = 1.000000e+17;
        // bottom: _107049_1015.e1 = // bottom: struct_vec_9645 _107047_1019;;
        // bottom: _107049_1015.e2 = _107047_1019;
        _107049_1015.e3 = 0;
        pray_sphere_intersect_106869 = _107049_1015;
        goto l106867;
    l106841: ;
        double _106846;
        _106846 = ry_106819 * t_106837;
        double _106847;
        _106847 = _105288 + _106846;
        double _106842;
        _106842 = rx_106813 * t_106837;
        double _106851;
        _106851 = rz_106826 * t_106837;
        double _106848;
        _106848 = _106847 - 0.000000e+00;
        double _106843;
        _106843 = _105275 + _106842;
        double _106852;
        _106852 = _105300 + _106851;
        double _106849;
        _106849 = _106848 * _106848;
        double _106844;
        _106844 = _106843 - -2.000000e+00;
        double _106853;
        _106853 = _106852 - -3.500000e+00;
        double _106845;
        _106845 = _106844 * _106844;
        double _106854;
        _106854 = _106853 * _106853;
        double _106850;
        _106850 = _106845 + _106849;
        double _106855;
        _106855 = _106850 + _106854;
        length_106858 = sqrt(_106855);
        plength_106858 = length_106858;
    l106856: ;
        length_106858 = plength_106858;
        _106861 = fabs(length_106858);
        p_106861 = _106861;
    l106859: ;
        _106861 = p_106861;
        bool _106862;
        _106862 = 1.000000e-17 < _106861;
        if (_106862) goto l106863; else goto l107041;
    l107041: ;
        struct_vec_9645 n_107042;
        n_107042.e0 = _106844;
        n_107042.e1 = _106848;
        n_107042.e2 = _106853;
        pvnormalize_106866 = n_107042;
        goto l106864;
    l106863: ;
        double _107038;
        _107038 = _106848 / length_106858;
        double _107039;
        _107039 = _106853 / length_106858;
        double _107037;
        _107037 = _106844 / length_106858;
        struct_vec_9645 _107040;
        _107040.e0 = _107037;
        _107040.e1 = _107038;
        _107040.e2 = _107039;
        pvnormalize_106866 = _107040;
        goto l106864;
    l106864: ;
        vnormalize_106866 = pvnormalize_106866;
        struct_vec_9645 p_107035;
        p_107035.e0 = _106843;
        p_107035.e1 = _106847;
        p_107035.e2 = _106852;
        struct_Isect_9647 isect_107036;
        isect_107036.e0 = t_106837;
        isect_107036.e1 = p_107035;
        isect_107036.e2 = vnormalize_106866;
        isect_107036.e3 = 1;
        pray_sphere_intersect_106869 = isect_107036;
        goto l106867;
    l106867: ;
        ray_sphere_intersect_106869 = pray_sphere_intersect_106869;
        double _106872;
        _106872 = _105361 * rz_106826;
        double _106870;
        _106870 = _105358 * rx_106813;
        double _106871;
        _106871 = _106870 + _106820;
        double _106873;
        _106873 = _106871 + _106872;
        double _106874;
        _106874 = _106873 * _106873;
        double D_106875;
        D_106875 = _106874 - C_105369;
        bool _106876;
        _106876 = 0.000000e+00 < D_106875;
        if (_106876) goto l106877; else goto l107034;
    l107034: ;
        goto l107031;
    l106877: ;
        _106880 = sqrt(D_106875);
        p_106880 = _106880;
    l106878: ;
        _106880 = p_106880;
        double _106881;
        _106881 = -0.000000e+00 - _106873;
        double t_106882;
        t_106882 = _106881 - _106880;
        bool _106883;
        _106883 = 0.000000e+00 < t_106882;
        if (_106883) goto l106884; else goto l107033;
    l107033: ;
        goto l107030;
    l106884: ;
        double _106885;
        _106885 = ray_sphere_intersect_106869.e0;
        bool _106886;
        _106886 = t_106882 < _106885;
        if (_106886) goto l106887; else goto l107029;
    l107029: ;
        goto l107030;
    l107030: ;
        goto l107031;
    l107031: ;
        pray_sphere_intersect_106915 = ray_sphere_intersect_106869;
        goto l106913;
    l106887: ;
        double _106892;
        _106892 = ry_106819 * t_106882;
        double _106888;
        _106888 = rx_106813 * t_106882;
        double _106889;
        _106889 = _105275 + _106888;
        double _106890;
        _106890 = _106889 - -5.000000e-01;
        double _106897;
        _106897 = rz_106826 * t_106882;
        double _106893;
        _106893 = _105288 + _106892;
        double _106891;
        _106891 = _106890 * _106890;
        double _106898;
        _106898 = _105300 + _106897;
        double _106894;
        _106894 = _106893 - 0.000000e+00;
        double _106899;
        _106899 = _106898 - -3.000000e+00;
        double _106895;
        _106895 = _106894 * _106894;
        double _106900;
        _106900 = _106899 * _106899;
        double _106896;
        _106896 = _106891 + _106895;
        double _106901;
        _106901 = _106896 + _106900;
        length_106904 = sqrt(_106901);
        plength_106904 = length_106904;
    l106902: ;
        length_106904 = plength_106904;
        _106907 = fabs(length_106904);
        p_106907 = _106907;
    l106905: ;
        _106907 = p_106907;
        bool _106908;
        _106908 = 1.000000e-17 < _106907;
        if (_106908) goto l106909; else goto l107027;
    l107027: ;
        struct_vec_9645 n_107028;
        n_107028.e0 = _106890;
        n_107028.e1 = _106894;
        n_107028.e2 = _106899;
        pvnormalize_106912 = n_107028;
        goto l106910;
    l106909: ;
        double _107023;
        _107023 = _106890 / length_106904;
        double _107024;
        _107024 = _106894 / length_106904;
        double _107025;
        _107025 = _106899 / length_106904;
        struct_vec_9645 _107026;
        _107026.e0 = _107023;
        _107026.e1 = _107024;
        _107026.e2 = _107025;
        pvnormalize_106912 = _107026;
        goto l106910;
    l106910: ;
        vnormalize_106912 = pvnormalize_106912;
        struct_vec_9645 p_107021;
        p_107021.e0 = _106889;
        p_107021.e1 = _106893;
        p_107021.e2 = _106898;
        struct_Isect_9647 isect_107022;
        isect_107022.e0 = t_106882;
        isect_107022.e1 = p_107021;
        isect_107022.e2 = vnormalize_106912;
        isect_107022.e3 = 1;
        pray_sphere_intersect_106915 = isect_107022;
        goto l106913;
    l106913: ;
        ray_sphere_intersect_106915 = pray_sphere_intersect_106915;
        double _106918;
        _106918 = _105414 * rz_106826;
        double _106916;
        _106916 = _105411 * rx_106813;
        double _106917;
        _106917 = _106916 + _106820;
        double _106919;
        _106919 = _106917 + _106918;
        double _106920;
        _106920 = _106919 * _106919;
        double D_106921;
        D_106921 = _106920 - C_105422;
        bool _106922;
        _106922 = 0.000000e+00 < D_106921;
        if (_106922) goto l106923; else goto l107020;
    l107020: ;
        goto l107017;
    l106923: ;
        _106926 = sqrt(D_106921);
        p_106926 = _106926;
    l106924: ;
        _106926 = p_106926;
        double _106927;
        _106927 = -0.000000e+00 - _106919;
        double t_106928;
        t_106928 = _106927 - _106926;
        bool _106929;
        _106929 = 0.000000e+00 < t_106928;
        if (_106929) goto l106930; else goto l107019;
    l107019: ;
        goto l107016;
    l106930: ;
        double _106931;
        _106931 = ray_sphere_intersect_106915.e0;
        bool _106932;
        _106932 = t_106928 < _106931;
        if (_106932) goto l106933; else goto l107015;
    l107015: ;
        goto l107016;
    l107016: ;
        goto l107017;
    l107017: ;
        pray_sphere_intersect_106961 = ray_sphere_intersect_106915;
        goto l106959;
    l106933: ;
        double _106934;
        _106934 = rx_106813 * t_106928;
        double _106943;
        _106943 = rz_106826 * t_106928;
        double _106938;
        _106938 = ry_106819 * t_106928;
        double _106944;
        _106944 = _105300 + _106943;
        double _106935;
        _106935 = _105275 + _106934;
        double _106939;
        _106939 = _105288 + _106938;
        double _106945;
        _106945 = _106944 - -2.200000e+00;
        double _106936;
        _106936 = _106935 - 1.000000e+00;
        double _106940;
        _106940 = _106939 - 0.000000e+00;
        double _106946;
        _106946 = _106945 * _106945;
        double _106937;
        _106937 = _106936 * _106936;
        double _106941;
        _106941 = _106940 * _106940;
        double _106942;
        _106942 = _106937 + _106941;
        double _106947;
        _106947 = _106942 + _106946;
        length_106950 = sqrt(_106947);
        plength_106950 = length_106950;
    l106948: ;
        length_106950 = plength_106950;
        _106953 = fabs(length_106950);
        p_106953 = _106953;
    l106951: ;
        _106953 = p_106953;
        bool _106954;
        _106954 = 1.000000e-17 < _106953;
        if (_106954) goto l106955; else goto l107013;
    l107013: ;
        struct_vec_9645 n_107014;
        n_107014.e0 = _106936;
        n_107014.e1 = _106940;
        n_107014.e2 = _106945;
        pvnormalize_106958 = n_107014;
        goto l106956;
    l106955: ;
        double _107011;
        _107011 = _106945 / length_106950;
        double _107010;
        _107010 = _106940 / length_106950;
        double _107009;
        _107009 = _106936 / length_106950;
        struct_vec_9645 _107012;
        _107012.e0 = _107009;
        _107012.e1 = _107010;
        _107012.e2 = _107011;
        pvnormalize_106958 = _107012;
        goto l106956;
    l106956: ;
        vnormalize_106958 = pvnormalize_106958;
        struct_vec_9645 p_107007;
        p_107007.e0 = _106935;
        p_107007.e1 = _106939;
        p_107007.e2 = _106944;
        struct_Isect_9647 isect_107008;
        isect_107008.e0 = t_106928;
        isect_107008.e1 = p_107007;
        isect_107008.e2 = vnormalize_106958;
        isect_107008.e3 = 1;
        pray_sphere_intersect_106961 = isect_107008;
        goto l106959;
    l106959: ;
        ray_sphere_intersect_106961 = pray_sphere_intersect_106961;
        double _106965;
        _106965 = 0.000000e+00 * rz_106826;
        double _106963;
        _106963 = 1.000000e+00 * ry_106819;
        double _106962;
        _106962 = 0.000000e+00 * rx_106813;
        double _106964;
        _106964 = _106962 + _106963;
        double _106966;
        _106966 = _106964 + _106965;
        _106969 = fabs(_106966);
        p_106969 = _106969;
    l106967: ;
        _106969 = p_106969;
        bool _106970;
        _106970 = 1.000000e-17 <= _106969;
        if (_106970) goto l106971; else goto l107006;
    l107006: ;
        goto l107003;
    l106971: ;
        double t_106972;
        t_106972 = _105480 / _106966;
        bool _106973;
        _106973 = 0.000000e+00 < t_106972;
        if (_106973) goto l106974; else goto l107005;
    l107005: ;
        goto l107002;
    l106974: ;
        double _106975;
        _106975 = ray_sphere_intersect_106961.e0;
        bool _106976;
        _106976 = t_106972 < _106975;
        if (_106976) goto l106977; else goto l107001;
    l107001: ;
        goto l107002;
    l107002: ;
        goto l107003;
    l107003: ;
        pray_plane_intersect_106980 = ray_sphere_intersect_106961;
        goto l106978;
    l106977: ;
        double _106996;
        _106996 = rz_106826 * t_106972;
        double _106992;
        _106992 = rx_106813 * t_106972;
        double _106997;
        _106997 = _105300 + _106996;
        double _106994;
        _106994 = ry_106819 * t_106972;
        double _106993;
        _106993 = _105275 + _106992;
        double _106995;
        _106995 = _105288 + _106994;
        struct_vec_9645 p_106998;
        p_106998.e0 = _106993;
        p_106998.e1 = _106995;
        p_106998.e2 = _106997;
        struct_vec_9645 _106999_1094;
        _106999_1094.e0 = 0.000000e+00;
        _106999_1094.e1 = 1.000000e+00;
        _106999_1094.e2 = 0.000000e+00;
        struct_Isect_9647 isect_107000;
        isect_107000.e0 = t_106972;
        isect_107000.e1 = p_106998;
        isect_107000.e2 = _106999_1094;
        isect_107000.e3 = 1;
        pray_plane_intersect_106980 = isect_107000;
        goto l106978;
    l106978: ;
        ray_plane_intersect_106980 = pray_plane_intersect_106980;
        int _106981;
        _106981 = ray_plane_intersect_106980.e3;
        bool _106982;
        _106982 = _106981 == 1;
        if (_106982) goto l106983; else goto l106991;
    l106991: ;
        pocclusion_106986 = occlusion_106773;
        goto l106984;
    l106983: ;
        double _106990;
        _106990 = 1.000000e+00 + occlusion_106773;
        pocclusion_106986 = _106990;
        goto l106984;
    l106984: ;
        occlusion_106986 = pocclusion_106986;
        int _106987;
        _106987 = lower_105220 + step_105222;
        unsigned long _106988;
        _106988 = 4294883355 * lo_106788;
        unsigned long _106989;
        _106989 = _106988 + hi_106790;
        plower_105220 = _106987;
        pupper_105221 = upper_105221;
        pstep_105222 = step_105222;
        pocclusion_105223 = occlusion_106986;
        pstate_105224 = _106989;
        goto l105218;
}

}